{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Part 1**"
      ],
      "metadata": {
        "id": "ZzELGGuf_ydN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Simulating a second-order polynomial with random input values\n",
        "np.random.seed(42) # For reproducibility\n",
        "X = np.random.uniform(-5, 5, 30)\n",
        "y = 2 * X**2 + 3 * X + 4\n",
        "X = X.reshape(-1, 1)\n",
        "\n",
        "# Plotting the data\n",
        "plt.scatter(X,y, color='blue')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "y7YNotnABITA",
        "outputId": "c0adec04-80f8-495f-c2b6-f3d75b68a503"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7af4376f0e90>"
            ]
          },
          "metadata": {},
          "execution_count": 1
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Simulating a second-order polynomial with random input values and noise component\n",
        "np.random.seed(42) # For reproducibility\n",
        "X = np.random.uniform(-5, 5, 30)\n",
        "y = 2 * X**2 + 3 * X + 4 + np.random.normal(0, 10, X.shape[0])\n",
        "X = X.reshape(-1, 1)\n",
        "\n",
        "# Plotting the data\n",
        "plt.scatter(X,y, color='blue')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "cHLSHkyLCKJa",
        "outputId": "5ae019e8-dd22-48dc-fcba-883529eccf0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7af434c75290>"
            ]
          },
          "metadata": {},
          "execution_count": 2
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Splitting into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=10, random_state=42)\n",
        "\n",
        "# Plotting the data\n",
        "plt.scatter(X_train, y_train, color='blue')\n",
        "plt.scatter(X_test, y_test, color='red')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "dJtJnDtNMBwO",
        "outputId": "4221dad5-022b-4ac6-b05b-676f6e1846f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7af4015f14d0>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Generating smooth data for plotting\n",
        "X_plot = np.linspace(-5, 5, 1000).reshape(-1, 1)\n",
        "\n",
        "# Function to train and evaluate models\n",
        "def train_model(degree, X_train, y_train, X_test, y_test):\n",
        "    poly = PolynomialFeatures(degree)\n",
        "    X_train_poly = poly.fit_transform(X_train)\n",
        "    X_test_poly = poly.transform(X_test)\n",
        "    model = LinearRegression().fit(X_train_poly, y_train)\n",
        "\n",
        "    # Training and testing errors\n",
        "    y_train_pred = model.predict(X_train_poly)\n",
        "    train_error = mean_squared_error(y_train, y_train_pred)\n",
        "    y_test_pred = model.predict(X_test_poly)\n",
        "    test_error = mean_squared_error(y_test, y_test_pred)\n",
        "\n",
        "    # Predicting smooth curve for plotting\n",
        "    X_plot_poly = poly.transform(X_plot)\n",
        "    y_plot = model.predict(X_plot_poly)\n",
        "\n",
        "    return train_error, test_error, y_plot\n",
        "\n",
        "# Training models\n",
        "degrees = [1, 2, 3, 10]\n",
        "results = {}\n",
        "for degree in degrees:\n",
        "    train_error, test_error, y_plot = train_model(degree, X_train, y_train, X_test, y_test)\n",
        "    results[degree] = (train_error, test_error, y_plot)\n",
        "\n",
        "# Plotting results\n",
        "plt.figure(figsize=(18, 5))\n",
        "\n",
        "# Underfit (degree 1)\n",
        "plt.subplot(1, 4, 1)\n",
        "plt.scatter(X_train, y_train, color='blue', label='Training Data')\n",
        "plt.scatter(X_test, y_test, color='red', label='Testing Data')\n",
        "plt.plot(X_plot, results[1][2], color='black', label='Underfit Model')\n",
        "plt.title(f'Underfit Model (Degree 1)\\nTrain MSE: {results[1][0]:.2f}, Test MSE: {results[1][1]:.2f}')\n",
        "plt.legend()\n",
        "\n",
        "# Proper Fit (degree 2)\n",
        "plt.subplot(1, 4, 2)\n",
        "plt.scatter(X_train, y_train, color='blue', label='Training Data')\n",
        "plt.scatter(X_test, y_test, color='red', label='Testing Data')\n",
        "plt.plot(X_plot, results[2][2], color='green', label='Proper Fit Model')\n",
        "plt.title(f'Proper Fit Model (Degree 2)\\nTrain MSE: {results[2][0]:.2f}, Test MSE: {results[2][1]:.2f}')\n",
        "plt.legend()\n",
        "\n",
        "# Proper Fit (degree 3)\n",
        "plt.subplot(1, 4, 3)\n",
        "plt.scatter(X_train, y_train, color='blue', label='Training Data')\n",
        "plt.scatter(X_test, y_test, color='red', label='Testing Data')\n",
        "plt.plot(X_plot, results[3][2], color='brown', label='Proper Fit Model')\n",
        "plt.title(f'Proper Fit Model (Degree 3)\\nTrain MSE: {results[3][0]:.2f}, Test MSE: {results[3][1]:.2f}')\n",
        "plt.legend()\n",
        "\n",
        "# Overfit (degree 10)\n",
        "plt.subplot(1, 4, 4)\n",
        "plt.scatter(X_train, y_train, color='blue', label='Training Data')\n",
        "plt.scatter(X_test, y_test, color='red', label='Testing Data')\n",
        "plt.plot(X_plot, results[10][2], color='purple', label='Overfit Model')\n",
        "plt.title(f'Overfit Model (Degree 10)\\nTrain MSE: {results[10][0]:.2f}, Test MSE: {results[10][1]:.2f}')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "9WmcH0MeBUlW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "outputId": "8072e224-d289-4633-a899-83398fb52455"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating training and testing errors for all models\n",
        "train_errors = [results[degree][0] for degree in degrees]\n",
        "test_errors = [results[degree][1] for degree in degrees]\n",
        "\n",
        "# Plotting the training and testing errors\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(degrees, train_errors, marker='o', label='Training Error')\n",
        "plt.plot(degrees, test_errors, marker='o', label='Testing Error')\n",
        "plt.xlabel('Model Complexity (Polynomial Degree)')\n",
        "plt.ylabel('Mean Squared Error')\n",
        "plt.title('Training and Testing Errors for Different Model Complexities')\n",
        "plt.xticks(degrees)  # Ensure all degrees are shown on x-axis\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "xmcKY9KGTpMx",
        "outputId": "b53c4ef3-4202-47e6-e4a1-2e759d4fe4ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArcAAAIjCAYAAAAZajMiAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAApOtJREFUeJzs3Xd4U2X7B/DvyWjSlQ5omxY6oGBLWUVUKEtUNoIIyg8UGaIoMkRwvyrLLY7XAW5QEQdO9FVkqChTZCizrFJGmxYobbqzzu+P06RN05FARsf3c129mpw8Se7Tpu3dJ/dzP4IoiiKIiIiIiJoAma8DICIiIiJyFya3RERERNRkMLklIiIioiaDyS0RERERNRlMbomIiIioyWByS0RERERNBpNbIiIiImoymNwSERERUZPB5JaIiIiImgwmt+QVkydPRkJCwiXdd8GCBRAEwb0BNTAnT56EIAhYsWKFr0Op14oVKyAIAk6ePOnrUJqUoqIi3HXXXdBqtRAEAXPmzPF1SA4EQcCCBQvsju3cuRO9evVCYGAgBEHA3r17AQBr165Famoq1Go1BEFAfn6+1+Ntamr6+jujMf1+uVwJCQmYPHmyxx7fld9/v//+OwRBwO+//+6xeKhmTG6bOUEQnPrgD6fvJSQkOPW9ctcfsGeffRbfffedWx7LXaz/6NT2odPpfB3iJXv22WexYsUKTJ8+HZ988gnuuOMOjz5f1deTTCZDaGgoOnfujGnTpmHHjh1OPYbRaMStt96KvLw8vPrqq/jkk08QHx+PCxcuYOzYsfD398dbb72FTz75BIGBgR49n0uVlZWFBQsW2JLy+liTG0EQsHnzZofbRVFEbGwsBEHAjTfe6OZovSMnJwcPPvggkpOTERAQgMDAQHTv3h1PP/00/0mpwdKlS5vFPw6NicLXAZBvffLJJ3bXP/74Y6xfv97heIcOHS7red577z1YLJZLuu8TTzyBRx999LKevyl47bXXUFRUZLv+008/4bPPPsOrr76Kli1b2o736tXLLc/37LPP4pZbbsGoUaPsjt9xxx0YN24cVCqVW57nUixbtgxBQUEOx0NDQ70fjJv8+uuv6NmzJ+bPn++150xNTcW8efMAAIWFhTh06BBWr16N9957Dw888ABeeeUVu/GlpaVQKCr/bBw/fhyZmZl47733cNddd9mOr127FoWFhVi8eDEGDBjgnZO5RFlZWVi4cCESEhKQmprq9P3UajVWrVqFPn362B3ftGkTzpw549Ofj8uxc+dODBs2DEVFRZgwYQK6d+8OAPj777/x/PPP448//sC6det8HKXv1PT7b+nSpWjZsqXDjHG/fv1QWloKPz8/L0dJTG6buQkTJthd3759O9avX+9wvLqSkhIEBAQ4/TxKpfKS4gMAhUJh9we1uaqeZOp0Onz22WcYNWrUJZd8XAq5XA65XO6156vJLbfcYpfQO6OsrAx+fn6QyRzfsCouLr6smUWLxQKDwQC1Wn3Jj5Gbm4uUlJRLvn91JpMJFoulzj+srVq1cvhZf+GFF3Dbbbfh1VdfRfv27TF9+nTbbdXPLzc3F4DjPxW1Hb8cl/s9crdhw4Zh9erVeP311+1+P61atQrdu3fH+fPnfRjdpcnPz8fNN98MuVyOPXv2IDk52e72Z555Bu+9956PomsYXPn9J5PJLut3Al06liVQvfr3749OnTph165d6NevHwICAvD4448DAL7//nsMHz4cMTExUKlUSExMxOLFi2E2m+0eo3rNrbUGbMmSJXj33XeRmJgIlUqFq6++Gjt37rS7b001t4IgYObMmfjuu+/QqVMnqFQqdOzYEWvXrnWI//fff8dVV10FtVqNxMREvPPOO07X8f7555+49dZbERcXB5VKhdjYWDzwwAMoLS11OL+goCCcPXsWo0aNQlBQECIiIvDggw86fC3y8/MxefJkhISEIDQ0FJMmTXLrW30rV65E9+7d4e/vj/DwcIwbNw6nT5+2G3P06FGMGTMGWq0WarUarVu3xrhx41BQUABA+voWFxfjo48+sr0Fa52VqKnmLCEhATfeeCM2b96Ma665Bmq1Gm3btsXHH3/sEN+///6La6+9Fv7+/mjdujWefvppLF++3K11vNZat88//xxPPPEEWrVqhYCAAOj1etv36vjx4xg2bBiCg4Nx++23A5ASqHnz5iE2NhYqlQpJSUlYsmQJRFG0e3zr6+/TTz9Fx44doVKpbK+9zz//HN27d0dwcDA0Gg06d+6M//73v/XGmpGRgf/973+2r7f1a5Gbm4upU6ciKioKarUaXbt2xUcffWT3GFV/nl577TXbz9PBgwdd/tr5+/vjk08+QXh4OJ555hm7c69a8zl58mRce+21AIBbb70VgiCgf//+6N+/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vXr1QlhYGCZNmoTZs2dDEAR88sknPn0buroFCxZg3bp16N27N6ZPn27749KpU6d6t9tMTk5GYmIiHnzwQZw9exYajQZff/21U/XAtRkxYgR69+6NRx99FCdPnkRKSgq++eYbp+qT65OYmIinn34ajz32GE6ePIlRo0YhODgYGRkZ+PbbbzFt2jQ8+OCD+PXXXzFz5kzceuutuOKKK2AymfDJJ5/Y/lhade/eHRs2bMArr7yCmJgYtGnTxm7hx6V4+OGHsXLlSgwcOBCzZs2ytQKLi4tDXl6e04nUV199VeMOZQMHDqyzDU9dRowYgeuuuw7/+c9/cPLkSXTt2hXr1q3D999/jzlz5tTbCg2QWjjl5eXh+uuvR+vWrZGZmYk33ngDqamplzQDOm3aNLzzzjuYPHkydu3ahYSEBHz11VfYsmULXnvttcuuhz179ixWrlwJQJqtPXjwIFavXg2dTod58+bhnnvuuazHr0omk+H999/H0KFD0bFjR0yZMgWtWrXC2bNn8dtvv0Gj0eCHH36o8zGcfY27IjExEaGhoXj77bcRHByMwMBA9OjRw6X6ZWda+Tn7+kpNTcX48eOxdOlSFBQUoFevXti4cWON7248//zz+O2339CjRw/cfffdSElJQV5eHnbv3o0NGzbU2DKvLmFhYfj2228xbNgwpKam2u1Qtnv3bnz22We2t+kjIiLw2GOPYeHChRgyZAhGjhyJ9PR0LF26FFdffXW9GwFdioyMDIwcORJDhgzBtm3bbO3SunbtWut9HnroIaxZswY33nijrTVhcXEx9u3bh6+++gonT55Ey5YtsXz5cvzvf//DihUrbKVZb7zxBiZMmIBly5bhvvvuq/U5unfvjmXLluHpp59Gu3btEBkZieuvv95hnLM/A4WFhWjdujVuueUWdO3aFUFBQdiwYQN27tyJl19++fK/kM2B9xozUGNQWyuwjh071jh+y5YtYs+ePUV/f38xJiZGfPjhh22tXKztT0Sx9lZgL730ksNjolq7m9pagdXUJqV6GxhRFMWNGzeK3bp1E/38/MTExETx/fffF+fNmyeq1epavgqVDh48KA4YMEAMCgoSW7ZsKd599922lmNVW9VMmjRJDAwMdLh/TbFfuHBBvOOOO0SNRiOGhISId9xxh6091+W0ArP6+uuvxT59+oiBgYFiYGCgmJycLM6YMUNMT08XRVEUT5w4Id55551iYmKiqFarxfDwcPG6664TN2zYYPc4hw8fFvv16yf6+/uLAGxf19pagdXUVuraa691aJGzZ88esW/fvqJKpRJbt24tPvfcc+Lrr78uAhB1Ol2d51xXK7Cqr7naWlSJYu3fK1EUxcLCQvGBBx4QY2JiRKVSKbZv31586aWX7Nr2iGLtr7+vvvpKHDRokBgZGSn6+fmJcXFx4j333CNmZ2fXeV6iWPvXMCcnR5wyZYrYsmVL0c/PT+zcubPD66Sun6e6ns/6dRMEQdRoNGLHjh3Fu+++W9yxY0eN96n+s+lKKzCrPXv2iKNHjxZbtGghqlQqMT4+Xhw7dqy4ceNG2xjr9/ncuXM1xlHfa1wUa/+9Vf13kShKLQhTUlJsLQLr+jms69yqqun76ezrq7S0VJw9e7bYokULMTAwUBwxYoR4+vRph6+/KEqvjxkzZoixsbGiUqkUtVqteMMNN4jvvvuubYyzrcCssrKyxAceeEC84oorRLVaLQYEBIjdu3cXn3nmGbGgoMBu7JtvvikmJyeLSqVSjIqKEqdPny5evHjRbkxt34vaXvPVf76sr4eDBw+Kt9xyixgcHCyGhYWJM2fOFEtLSx0es/rfgMLCQvGxxx4T27VrJ/r5+YktW7YUe/XqJS5ZskQ0GAzi6dOnxZCQEHHEiBEOsdx8881iYGCgeOLECVEUa/79p9PpxOHDh4vBwcEiANvvvOqtwKzq+xkoLy8XH3roIbFr165icHCwGBgYKHbt2lVcunSpQ3xUM0EUG9A0G5GXjBo1CgcOHLCtXiXfmjNnDt555x0UFRX5fGEeETUs1s0izp075/K229Q8seaWmrzqW+UePXoUP/30k22LRPKu6t+PCxcu4JNPPkGfPn2Y2BIR0WVjzS01eW3btsXkyZNtvReXLVsGPz+/WlvDkGelpaWhf//+6NChA3JycvDBBx9Ar9fjySef9HVoRETUBDC5pSZvyJAh+Oyzz6DT6aBSqZCWloZnn3221kbw5FnDhg3DV199hXfffReCIODKK6/EBx98YNdOjoiI6FKx5paIiIiImgzW3BIRERFRk8HkloiIiIiaDNbcQtrvOSsrC8HBwR7ZcpSIiIiILo8oiigsLERMTIzdluTVMbkFkJWVhdjYWF+HQURERET1OH36tG0nuZowuQVsW1iePn0aGo3G489nNBqxbt06DBo0CEql0uPP11A01/MGmve5ExFR0+OLv2t6vR6xsbH1bj3O5BawlSJoNBqvJbcBAQHQaDTNKtFprucNNO9zJyKipseXf9fqKyHlgjIiIiIiajKY3BIRERFRk8HkloiIiIiaDNbcEhERkduJogiTyQSz2ezrUMgDjEYjFAoFysrK3PY9lsvlUCgUl92WlcktERERuZXBYEB2djZKSkp8HQp5iCiK0Gq1OH36tFv3CAgICEB0dDT8/Pwu+TGY3BIREZHbWCwWZGRkQC6XIyYmBn5+ftwgqQmyWCwoKipCUFBQnRsqOEsURRgMBpw7dw4ZGRlo3779JT8uk1siIiJyG4PBAIvFgtjYWAQEBPg6HPIQi8UCg8EAtVrtluQWAPz9/aFUKpGZmWl77EvBBWVERETkdu5KeKh5ccfrhq88IiIiImoymNwSERERUZPB5JaIiIgaJLNFxLbjF/D93rPYdvwCzBbR1yG5LCEhAa+99prT43///XcIgoD8/HyPxdTUcUEZERERNThr92dj4Q8HkV1QZjsWHaLG/BEpGNIp2u3PV19Hh/nz52PBggUuP+7OnTsRGBjo9PhevXohOzsbISEhLj+XK37//Xdcd911Nd6WnZ0NrVbr0ef3JCa3RERE1KCs3Z+N6St3o/o8ra6gDNNX7sayCVe6PcHNzs62Xf7iiy/w1FNPIT093XYsKCjIdlkURZjNZigU9adRERERLsXh5+fn1cQyPT0dGo3G7lhkZGSNYw0GQ439Z41GI5RKpcvPfan3qw/LErzNYoaQuRmt8rZByNwMWLhzCxERNW2iKKLEYHLqo7DMiPlrDjgktgBsxxasOYjCMqNTjyeKzpUyaLVa20dISAgEQbBdP3z4MIKDg/Hzzz+je/fuUKlU2Lx5M44fP46bbroJUVFRCAoKwtVXX40NGzbYPW71sgRBEPD+++/j5ptvRkBAANq3b481a9bYbq9elrBixQqEhobil19+QYcOHRAUFIQhQ4bYJeMmkwmzZ89GaGgoWrRogUceeQSTJk3CqFGj6j3vyMhIu3PXarW2jgWTJ0/GqFGj8MwzzyAmJgZJSUk4efIkBEHAF198geHDhyMgIACffvopLBYLFi1ahNatW0OlUiE1NRVr1661PU/V+1177bVQq9X49NNPnfreuIozt950cA2w9hEo9Fm4CgAylwGaGGDIC0DKSF9HR0RE5BGlRjNSnvrFLY8lAtDpy9B5wTqnxh9cNBgBfu5Jdx599FEsWbIEbdu2RVhYGE6fPo1hw4bhmWeegUqlwscff4wRI0YgPT0dcXFxtT7OwoUL8eKLL+Kll17CG2+8gdtvvx2ZmZkIDw+vcXxJSQmWLFmCTz75BDKZDBMmTMCDDz5oSw5feOEFfPrpp1i+fDk6dOiA//73v/juu+9qLTtwxcaNG6HRaLB+/Xq7448//jgWLVqEXr16ISAgAP/973/x8ssv45133kG3bt3w4YcfYuTIkThw4ADat29v9zV8+eWX0a1bt0vuY1sfztx6y8E1wJcTAX2W/XF9tnT84Jqa70dEREQNwqJFizBw4EAkJiYiPDwcXbt2xT333INOnTqhffv2WLx4MRITE+1mYmsyefJkjB8/Hu3atcOzzz6LoqIi/PXXX7WONxqNePvtt3HVVVfhyiuvxMyZM7Fx40bb7W+88QYee+wx3HzzzUhOTsabb76J0NBQp86pdevWCAoKsn107NjR7vbAwEC8//776Nixo91t999/P0aMGIE2bdogOjoaS5YswSOPPIJx48YhKSkJL7zwAlJTUx0W082ZMwejR4+23c8TOHPrDRYzsPYRoNY3WQRg7aNA8nBAJvdycERERJ7lr5Tj4KLBTo39KyMPk5fvrHfciilX45o2Nc90Vn9ud7nqqqvsrhcVFWHBggX43//+h+zsbJhMJpSWluLUqVN1Pk6XLl1slwMDA6HRaJCbm1vr+ICAACQmJtquR0dH28YXFBQgJycH11xzje12uVyO7t27w2Kx1HtOf/75J4KDg23Xq9fAdu7cucY62+7du9su6/V6ZGVloXfv3nZjevfujX/++cfuWPWvoScwufWGzK2OM7Z2REB/VhrXpq/XwiIiIvIGQRCcLg3o2z4C0SFq6ArKapwSEgBoQ9To2z4CclndHQ7crXrXgwcffBDr16/HkiVL0K5dO/j7++OWW26BwWCo83GqJ5CCINSZiNY03tla4vq0adOmzlne2jo9uNIBwh33cwXLEryhKMe944iIiJoouUzA/BEpAKREtirr9fkjUrye2NZky5YtmDx5Mm6++WZ07twZWq0WJ0+e9GoMISEhiIqKws6dlbPdZrMZu3fv9loMGo0GMTEx2LJli93xLVu2ICUlxWtxWHHm1huCotw7joiIqAkb0ikayyZc6dDnVuvBPreXon379vjmm28wYsQICIKAJ5980qlSAHebNWsWnnvuObRr1w7Jycl44403cPHixXp79wJAbm4uysrK7I61aNHC5RZdDz30EObPn4/ExESkpqZi+fLl2Lt3r8c6ItSFya03xPeSuiLos1Fz3a0g3R7fy9uRERERNUhDOkVjYIoWf2XkIbewDJHBalzTJrxBzNhavfLKK7jzzjvRq1cvtGzZEo888gj0er3X43jkkUeg0+kwceJEyOVyTJs2DYMHD4ZcXn+9cVJSksOxbdu2oWfPni7FMHv2bBQUFGDevHnIzc1FSkoK1qxZY9cpwVsE0V1FG42YXq9HSEgICgoKHBoZu421WwIA+wS34od07MdNvh2Y0WjETz/9hGHDhnmkaXND1pzPnYial7KyMmRkZKBNmzYea/VEdbNYLOjQoQPGjh2LxYsXe+w59Ho9NBqNrS+uO9T1+nE2X2PNrbekjJQSWE21t1I0Mc0isSUiIiLPyMzMxHvvvYcjR45g3759mD59OjIyMnDbbbf5OjSfYHLrTSkjgTn7YRrzUeWxe7cwsSUiIqJLJpPJsGLFClx99dXo3bs39u3bhw0bNqBDhw6+Ds0nWHPrbTI5xOThKFGGI8CYB+QeABL6+DoqIiIiaqRiY2MdOhU0Z5y59ZGCgDbShay9Po2DiIiIqClhcusj+QEJ0oXsf+ocR0RERETOY3LrI/n+CdKF7L2+DIOIiIioSWFy6yP51rKE80eB8kLfBkNERETURDC59RGDUgMxOAaACOj2+TocIiIioiaBya0PidFdpQtcVEZERETkFkxufUjUdpEusO6WiIjIkcUMZPwJ7PtK+mwx+zoit1mwYAFSU1N9HUaTxOTWh0QtZ26JiIhqdHAN8Fon4KMbga+nSp9f6yQd9wBBEOr8WLBgwWU99nfffWd37MEHH8TGjRsvL2gnLFiwoMbzSU5O9vhz+wo3cfAhW1nC+SNAeRGgCvJtQERERA3BwTXAlxMBiPbH9dnScQ9sW5+dnW27/MUXX+Cpp55Cenq67VhQkHv/RgcFBbn9MWvTsWNHbNiwwe6YQlF7CmgwGODn52d3zGw2QxAEyGSuzYte6v0uB2dufSkoCgiOBheVERFRkyaKgKHYuY8yPfDzw3BIbKUHkj6tfUQa58zjiTU9jiOtVmv7CAkJgSAIdsc+//xzdOjQAWq1GsnJyVi6dKntvgaDATNnzkR0dDTUajXi4+Px3HPPAQASEhIAADfffDMEQbBdr16WMHnyZIwaNQpLlixBdHQ0WrRogRkzZsBoNNrGZGdnY/jw4fD390ebNm2watUqJCQk4LXXXqvz3BQKhd25aLVatGzZ0nZ7QkICFi9ejIkTJ0Kj0WDatGlYsWIFQkNDsWbNGqSkpEClUuHUqVO4ePEiJk6ciBYtWiAmJgbDhg3D0aNHbY9V2/28iTO3vhadChRmS3W38Wm+joaIiMj9jCXAszFuejAR0GcBz8c6N/zxLMAv8LKe8dNPP8VTTz2FN998E926dcOePXtw9913IzAwEJMmTcLrr7+ONWvW4Msvv0RcXBxOnz6N06dPAwB27tyJyMhILF++HEOGDIFcLq/1eX777TdER0fjt99+w7Fjx/B///d/SE1Nxd133w0AmDhxIs6fP4/ff/8dSqUSc+fORW5u7mWdm9WSJUvw1FNPYf78+QCAP//8EyUlJXjhhRfw/vvvo0WLFoiMjMT48eNx9OhRfPfdd5DJZHj66acxbNgwHDx4EEqlEgBqvJ83Mbn1tZhU4MjPrLslIiJqoObPn4+XX34Zo0ePBgC0adMGBw8exDvvvINJkybh1KlTaN++Pfr06QNBEBAfH2+7b0REBAAgNDQUWq22zucJCwvDm2++CblcjuTkZAwfPhwbN27E3XffjcOHD2PDhg3YuXMnrrrqKgDA+++/j/bt29cb/759+xxKICZMmIC3337bdv3666/HvHnzbNf//PNPGI1GLF26FF27SmWUR48exZo1a7Blyxb07NkTer0eK1euRHx8PL777jvceuutAOBwP29jcutr0anSZ3ZMICKipkoZIM2gOiNzK/DpLfWPu/0rIL6Xc899GYqLi3H8+HFMnTrVNoMKACaTCSEhIQCkkoKBAwciKSkJQ4YMwY033ohBgwa5/FwdO3a0m9mNjo7Gvn1S2WJ6ejoUCgWuvPJK2+3t2rVDWFhYvY+blJSENWvsF+JpNBq769aEuSo/Pz906dLFdv3QoUNQKBTo0aOH7ViLFi2QlJSEQ4cO1Xo/b/Npze2yZcvQpUsXaDQaaDQapKWl4eeff7bdXlZWhhkzZqBFixYICgrCmDFjkJOTY/cYp06dwvDhwxEQEIDIyEg89NBDMJlM3j6VSxeTKn0+f0SqDSIiImpqBEEqDXDmI/F6QBMDQKjtwQBNK2mcM48n1PY4zikqKgIAvPfee9i7d6/tY//+/di+fTsA4Morr0RGRgYWL16M0tJSjB07Frfc4kSCXo31bX3bmQoCLBbLZcUPSMlmu3bt7D6qlwoEBjqWbvj7+0O4hK/fpd7PXXya3LZu3RrPP/88du3ahb///hvXX389brrpJhw4cAAA8MADD+CHH37A6tWrsWnTJmRlZdneEgCkFXjDhw+HwWDA1q1b8dFHH2HFihV46qmnfHVKrgvWAkFaQLRwURkREZFMDgx5oeJK9QSp4vqQ56VxXhAVFYWYmBicOHHCIUFs06aNbZxGo8H//d//4b333sMXX3yBr7/+Gnl5eQCkpNVsvrwevUlJSTCZTNizZ4/t2LFjx3Dx4sXLelxXdOjQASaTCTt27LAdu3DhAtLT05GSkuK1OOrj07KEESNG2F1/5plnsGzZMmzfvh2tW7fGBx98gFWrVuH6668HACxfvhwdOnTA9u3b0bNnT6xbtw4HDx7Ehg0bEBUVhdTUVCxevBiPPPIIFixY4NDGosGKSQWOrJXqbuN6+joaIiIi30oZKbX7WvuItHjMShMjJbZubgNWn4ULF2L27NkICQnBkCFDUF5ejr///hsXL17E3Llz8corryA6OhrdunWDTCbD6tWrodVqERoaCkDqRrBx40b07t0bKpXKqVKC6pKTkzFgwABMmzYNy5Ytg1KpxLx585yaJTWZTNDpdHbHBEFAVFSUSzG0b98eN910E+6++24sW7YMgiDgmWeeQatWrXDTTTe5fE6e0mBqbs1mM1avXo3i4mKkpaVh165dMBqNGDBggG1McnIy4uLisG3bNvTs2RPbtm1D586d7b45gwcPxvTp03HgwAF069atxucqLy9HeXm57bperwcgFUBXbbnhKdbnsH6WRXWG/MhaWLL2wOyF5/eV6ufdnDTncyei5sVoNEIURVgslst7Sz35RuCKocCpbUCRTnqXMy5NmrF1w1v1dbHGbf185513Qq1W4+WXX8ZDDz2EwMBAdO7cGbNnz4bFYkFgYCBefPFFHD16FHK5HFdffTV+/PFH22O89NJLePDBB/Hee++hVatWOHHiBMSKFmXW5xBF0fZ1s6o+ZsWKFbjrrrvQr18/aLVaPPPMMzhw4AD8/Pxq/VqLoogDBw4gOjra7rhKpUJJSYnduKqPUf1rYPXBBx9gzpw5GDlyJAwGA/r27Ysff/wRcrnc7nt+qd97i8UCURRhNBodOks4+zdUEEUnG8B5yL59+5CWloaysjIEBQVh1apVGDZsGFatWoUpU6bYJaEAcM011+C6667DCy+8gGnTpiEzMxO//PKL7faSkhIEBgbip59+wtChQ2t8zgULFmDhwoUOx1etWoWAgMsrPL8UUQV70PPEq9CrW+O3Ds96/fmJiIjcxdpTNTY2tvG8g9pInT17Fp06dcJ3332Ha6+91tfhuIXBYMDp06eh0+kc1lCVlJTgtttuQ0FBgcOCuKp8PnOblJSEvXv3oqCgAF999RUmTZqETZs2efQ5H3vsMcydO9d2Xa/XIzY2FoMGDarzi+UuRqMR69evx8CBA6Xi8cJuwOuvIrg8C8MG9r/slZ0NlcN5NyPN+dyJqHkpKyvD6dOnERQUBLVa7etwmpRff/0VRUVF6Ny5M7Kzs/Hoo48iISEBQ4YM8frfFlEUUVhYiODgYLcuHisrK4O/vz/69evn8PqxvtNeH58nt9YVfADQvXt37Ny5E//973/xf//3fzAYDMjPz7fVrABATk6OrU+cVqvFX3/9Zfd41m4KdfWSU6lUUKlUDseVSqVXXxy25wuPA4KiIBTlQHkhHYi9xmsx+IK3v84NSXM+dyJqHqput+rNLVebA7PZjCeeeAInTpxAcHAwevXqhU8//bTGnMbTrGUH7t5aVyaTQRCEGv9eOvv3s8G96iwWC8rLy9G9e3colUps3LjRdlt6ejpOnTqFtDRpJ6+0tDTs27fPbneO9evXQ6PRNKhVe06Jrmh0zM0ciIiIqAaDBw/G/v37UVJSgpycHHz77bd2G0aQxKczt4899hiGDh2KuLg4FBYWYtWqVfj999/xyy+/ICQkBFOnTsXcuXMRHh4OjUaDWbNmIS0tDT17Sh0FBg0ahJSUFNxxxx148cUXodPp8MQTT2DGjBk++S/GGWaLiB0Zedh1XkCLjDyktYuEXCZImzkcXcfNHIiIiIgug0+T29zcXEycOBHZ2dkICQlBly5d8Msvv2DgwIEAgFdffRUymQxjxoxBeXk5Bg8ejKVLl9ruL5fL8eOPP2L69OlIS0uz7fG8aNEiX51Sndbuz8bCHw4iu6AMgBwfH/0b0SFqzB+RgiHWzRw4c0tERE2Aj9erUyPljteNT5PbDz74oM7b1Wo13nrrLbz11lu1jomPj8dPP/3k7tDcbu3+bExfuRvVv2W6gjJMX7kbH46OwXUAcO4wYCwFlP4+iJKIiOjyWOsiS0pK4O/Pv2XkGmt7sstZn+LzBWXNgdkiYuEPBx0SWwAQIe238viGC9gaGAGh+Byg2w/EXu3lKImIiC6fXC5HaGiobT1MQECAT7diJc+wWCwwGAwoKytzy4IyURRRUlKC3NxchIaGOvS4dQWTWy/4KyOvohShZiKAbH058tumIKx4k1R3y+SWiIgaKWvHoqoLvqlpEUURpaWlTu2Q5orQ0NA6O145g8mtF+QW1p7Y2o0L6oAwbGLdLRERNWqCICA6OhqRkZHcmbGJMhqN+OOPP9CvXz+3tbhUKpWXNWNrxeTWCyKDnWtiLUanAkfAjglERNQkyOVytyQr1PDI5XKYTCao1eoG17+9wfW5bYquaROO6BA1apu0FwBEh6jRPrWPdCD3kLSojIiIiIhcwuTWC+QyAfNHSJtKVE9wrdfnj0iBPLQ1ENASEM1AzgGvxkhERETUFDC59ZIhnaKxbMKV0IbYlyhoQ9RYNuFKDOkUDQgCYO13y9IEIiIiIpcxufWiIZ2isfmR6/H40CsAAC0Dldj8yPVSYmsVnSp95qIyIiIiIpcxufUyuUzAqNQYAMD5YiNKjWb7AZy5JSIiIrpkTG59ICzADyFKaUuHdF2h/Y3WmdvcQ4DRuRZiRERERCRhcusj0QG1JLchrQH/cMBiAnK5qIyIiIjIFUxufSQmQPqcrtPb31B1URnrbomIiIhcwuTWR6IDpZnbQ9VnboHK0gTW3RIRERG5hMmtj8RUKUsQRbHajanSZ87cEhEREbmEya2PaP2lzgkFpUbk6Mvtb6y6qMxU7nBfIiIiIqoZk1sfUciAhBZS4e3h6nW3oXGAfxhgMXKnMiIiIiIXMLn1oaSoIAA1dEwQBNbdEhEREV0CJrc+dEVUMADgcE2Lylh3S0REROQyJrc+lFwxc1tjcsuZWyIiIiKXMbn1oSu0UnJ7PLcIRrPF/kbrzG3OQS4qIyIiInISk1sfahXij0A/OQxmC06eL7a/MTQeUIdKi8pyD/okPiIiIqLGhsmtD8lkAq7Q1lJ3W3Wnsux/vBsYERERUSPF5NbHkm3Jrd7xRmvdLReVERERETmFya2PJWs1AGpoBwZUmbnd67V4iIiIiBozJrc+llRbWQIARHeVPuccAEwGL0ZFRERE1DgxufUxa1nCmYulKCo32d8Y1gZQhwBmA3DukA+iIyIiImpcmNz6WGiAH6I0KgC17VRWMXvLulsiIiKiejG5bQCsdbd1Lipj3S0RERFRvZjcNgDW0oQ6F5Vx5paIiIioXkxuG4C6F5WlSp9zDgBmo/eCIiIiImqEmNw2AElVZm5FUbS/MbwtoAoBzOVALheVEREREdWFyW0D0C4yCHKZgIJSI3L05fY3CgIQ3UW6zLpbIiIiojoxuW0AVAo52rYMBAAcqmlRGetuiYiIiJzC5LaBSKprURk7JhARERE5hcltA1F3x4Ru0mfdfi4qIyIiIqoDk9sGIsnW67aG5DasDaDSSIvKzh32cmREREREjQeT2wbCOnN7PLcIRrPF/kaZrHKnsux/vBwZERERUePB5LaBaBXqjyCVAgazBRnnix0HcBteIiIionoxuW0gZDIBV0QFAahnMwcuKiMiIiKqFZPbBsRad5teVzsw3X7AbPJeUERERESNCJPbBqTOjgnhiYBfMGAqBc6nezkyIiIiosaByW0DYu11W2NZgkxWuVMZ626JiIiIasTktgGxztyeuViKwrIa+tmy7paIiIioTkxuG5DQAD9oNWoAwJGcmjZzSJU+c+aWiIiIqEZMbhuYOksTrDO3un1cVEZERERUAya3DUydi8patAP8gioWlR3xcmREREREDR+T2wbGNnObXcuiMm3FojLW3RIRERE5YHLbwCRX9Lo9rNNDFEXHAay7JSIiIqoVk9sGJjEyEHKZAH2ZCTp9meMAdkwgIiIiqhWT2wZGpZCjbctAALUsKrPtVLYPsJi9FxgRERFRI8DktgFKqm9RmTIQMJYA5496OTIiIiKiho3JbQOUbFtUpne8USav3KmMpQlEREREdpjcNkCVi8pqmLkFgOiu0mcuKiMiIiKyw+S2AbKWJRw/VwSj2eI4gIvKiIiIiGrE5LYBah3mjyCVAkaziIzzxY4DrIvKsv/lojIiIiKiKpjcNkCCIOCKqCAAtZQmtLwCUAYAxmLgwjEvR0dERETUcDG5baCSrHW3tS0q03aWLrPuloiIiMiGyW0D1SG6jnZgAOtuiYiIiGrA5LaBSoqqaAdWW3LLbXiJiIiIHDC5baCs7cDO5peisMzoOMA6c6v7F7DU0FGBiIiIqBlicttAhQQoodWoAQBHcmpZVKbwBwxFXFRGREREVIHJbQNm7Xd7KLuG5FauqFxUxrpbIiIiIgBMbhu05PoWlbHuloiIiMiOT5Pb5557DldffTWCg4MRGRmJUaNGIT093W5M//79IQiC3ce9995rN+bUqVMYPnw4AgICEBkZiYceeggmk8mbp+IRyVp2TCAiIiJyhcKXT75p0ybMmDEDV199NUwmEx5//HEMGjQIBw8eRGBgoG3c3XffjUWLFtmuBwQE2C6bzWYMHz4cWq0WW7duRXZ2NiZOnAilUolnn33Wq+fjbklRFb1udXqIoghBEOwH2O1UZgFknIgnIiKi5s2nye3atWvtrq9YsQKRkZHYtWsX+vXrZzseEBAArVZb42OsW7cOBw8exIYNGxAVFYXU1FQsXrwYjzzyCBYsWAA/Pz+H+5SXl6O8vNx2Xa+XNkowGo0wGmvoTOBm1ueo77niwlSQywToy0w4faEI0SFq+wGhbaFQqCEYCmHMTQdatPNUyG7h7Hk3Rc353ImIqOnxxd81Z5/Lp8ltdQUFBQCA8PBwu+OffvopVq5cCa1WixEjRuDJJ5+0zd5u27YNnTt3RlRUlG384MGDMX36dBw4cADdunVzeJ7nnnsOCxcudDi+bt06u1lhT1u/fn29YyJUcuhKBaz88Td0DBMdbu/r1wrhpuP45+ePcDY8zRNhup0z591UNedzJyKipsebf9dKSkqcGtdgkluLxYI5c+agd+/e6NSpk+34bbfdhvj4eMTExODff//FI488gvT0dHzzzTcAAJ1OZ5fYArBd1+l0NT7XY489hrlz59qu6/V6xMbGYtCgQdBoNO4+NQdGoxHr16/HwIEDoVQq6xy7ruhf/G+fDprYZAzr18bhdpnsd2DXcXTTCug6YJiHInYPV867qWnO505ERE2PL/6uWd9pr0+DSW5nzJiB/fv3Y/PmzXbHp02bZrvcuXNnREdH44YbbsDx48eRmJh4Sc+lUqmgUqkcjiuVSq8mHs48X0pMCP63T4dj54prHtvqSmDXh5Dn7IO8kSRN3v46NyTN+dyJiKjp8ebfNWefp0GsQJo5cyZ+/PFH/Pbbb2jdunWdY3v06AEAOHZM2rhAq9UiJyfHboz1em11uo2J09vwZv/DncqIiIio2fNpciuKImbOnIlvv/0Wv/76K9q0cXzbvbq9e/cCAKKjowEAaWlp2LdvH3Jzc21j1q9fD41Gg5SUFI/E7U3WjRyOnyuC0VxD8hqRDMhVQLkeuJjh5eiIiIiIGhafJrczZszAypUrsWrVKgQHB0On00Gn06G0tBQAcPz4cSxevBi7du3CyZMnsWbNGkycOBH9+vVDly5dAACDBg1CSkoK7rjjDvzzzz/45Zdf8MQTT2DGjBk1lh40Nq3D/BGkUsBoFnHiXLHjALkS0FbUKGft8W5wRERERA2MT5PbZcuWoaCgAP3790d0dLTt44svvgAA+Pn5YcOGDRg0aBCSk5Mxb948jBkzBj/88IPtMeRyOX788UfI5XKkpaVhwoQJmDhxol1f3MZMEATb7O1hXS2F1NzMgYiIiAiAjxeUiaJja6uqYmNjsWnTpnofJz4+Hj/99JO7wmpwkrTB2JV5kdvwEhEREdWjQSwoo7o5vw3vv0A9/zAQERERNWVMbhuBejsmRHaoWFRWAOSd8GJkRERERA0Lk9tGIFkrbSxxNr8U+rIatp6TK4GojtJl1t0SERFRM8bkthEICVAiOkQNADjCulsiIiKiWjG5bSQqOybUV3e71yvxEBERETVETG4biaT6FpVV3amMi8qIiIiomWJy20gk19frNqIDIPcDygqAiye9FxgRERFRA8LktpFIipIWlR3WFdbcH1jhB0RWbDfM0gQiIiJqppjcNhKJkYFQyAQUlpmQXVBW8yAuKiMiIqJmjsltI6FSyNE2IhCAM5s57PVKTEREREQNDZPbRiRJW1maUKOqM7dcVEZERETNEJPbRqTeRWWRKYBMCZTlA/mZ3guMiIiIqIFgctuIWLfhrbUsQaECoioWlbHuloiIiJohJreNSHK0lNweP1cEo9lS8yDW3RIREVEzxuS2EWkV6o9glQJGs4gT54prHsSOCURERNSMMbltRARBwBX11d1WnbnlojIiIiJqZpjcNjJJtuS2lrrbqI7SorLSi0D+KS9GRkREROR7TG4bmQ5aJxaVRXaQLrPuloiIiJoZJreNjLXXba3JLcC6WyIiImq2mNw2MtZ2YGfzS6EvM9Y8iB0TiIiIqJlictvIhAQoER2iBgAcqXcb3n+4qIyIiIiaFSa3jZB1UdmhOheVKYCSC0DBGS9GRkRERORbTG4boWRb3W0t7cCUaiCCi8qIiIio+WFy2wgl19cxAQBiukqfuaiMiIiImhEmt41Q1V63Ym01tVxURkRERM0Qk9tGKDEiCAqZgMIyE7ILymoeFNNN+py1l4vKiIiIqNlgctsI+SlkaBsRCKCObXijOgKCHCg5D+jPejE6IiIiIt9hcttIWReV1boNr9K/cqcy1t0SERFRM8HktpFKcmZRGetuiYiIqJlhcttIOdcxIVX6zJlbIiIiaiaY3DZS1pnb4+eKYDBZah5UdeaWi8qIiIioGWBy20i1CvVHsEoBo1nEifNFNQ/SdpIWlRWfA/RZ3g2QiIiIyAeY3DZSgiDUX3er9AcikqXLrLslIiKiZoDJbSNWdTOHWrHuloiIiJoRJreNmFOLyqIrtuHN/scLERERERH5FpPbRiypotct24ERERERSZjcNmJJUdLM7dn8UhSUGmsepO0MCDKgKAfQZ3sxOiIiIiLvcym5NZlMWLRoEc6cOeOpeMgFIQFKxISoAQBHcmqZvfULAFomSZc5e0tERERNnEvJrUKhwEsvvQSTyeSpeMhFXFRGREREVMnlsoTrr78emzZt8kQsdAkq6271tQ9i3S0RERE1EwpX7zB06FA8+uij2LdvH7p3747AwEC720eOHOm24Kh+3IaXiIiIqJLLye19990HAHjllVccbhMEAWaz+fKjIqdVLUsQRRGCIDgOsi0q0wGFOiBY6+UoiYiIiLzD5bIEi8VS6wcTW+9LjAiCQiagsMyErIKymgf5BQItr5Auc/aWiIiImjC2Amvk/BQyJEYEAWDdLREREdElJbebNm3CiBEj0K5dO7Rr1w4jR47En3/+6e7YyEnsmEBEREQkcTm5XblyJQYMGICAgADMnj0bs2fPhr+/P2644QasWrXKEzFSPWzJbTZ3KiMiIqLmzeUFZc888wxefPFFPPDAA7Zjs2fPxiuvvILFixfjtttuc2uAVD+nOiZoOwMQgMJsoDAHCI7yTnBEREREXuTyzO2JEycwYsQIh+MjR45ERkaGW4Ii1yRHS71uj58rgsFkqXmQKqhyURlnb4mIiKiJcjm5jY2NxcaNGx2Ob9iwAbGxsW4JilwTE6JGsFoBk0XEifNFtQ+M7ip9Zt0tERERNVEulyXMmzcPs2fPxt69e9GrVy8AwJYtW7BixQr897//dXuAVD9BEJAUFYy/My8iXVeI5IpdyxzEpAL7vgSy//FqfERERETe4nJyO336dGi1Wrz88sv48ssvAQAdOnTAF198gZtuusntAZJzkrRScnsouxA3pdYyiIvKiIiIqIlzKbk1mUx49tlnceedd2Lz5s2eiokuQeWisrp63XYBIAD6s0DROSAowjvBEREREXmJSzW3CoUCL774Ikwmk6fioUtkXVRWZ8cEVTDQop10mbO3RERE1AS5vKDshhtuwKZNmzwRC12GK6KkmdusgjIUlBprH8jNHIiIiKgJc7nmdujQoXj00Uexb98+dO/eHYGBgXa3jxw50m3BkfNC/JWICVEjq6AMR3IKcXVCeM0Do1OBfas5c0tERERNksvJ7X333QcAeOWVVxxuEwQBZrP58qOiS5KkDUZWQRkOZ+trT245c0tERERNmMtlCRaLpdYPJra+lVTRAuxwnTuVdZE+688Axee9EBURERGR97iU3BqNRigUCuzfv99T8dBl6BDtxDa8ak3lojLO3hIREVET41Jyq1QqERcXxxnaBirJ2g4spxCiKNY+0Nbvdo/ngyIiIiLyIpfLEv7zn//g8ccfR15enifiocvQtmUQFDIBhWUmZBWU1T6QdbdERETURLm8oOzNN9/EsWPHEBMTg/j4eIduCbt373ZbcOQaP4UMiRFBSM8pxOFsPVqF+tc80DZzy214iYiIqGlxObkdNWqUB8Igd0nSBkvJra4QN3SIqnlQdMWisoLTQPEFILCF9wIkIiIi8iCXk9v58+e77cmfe+45fPPNNzh8+DD8/f3Rq1cvvPDCC0hKSrKNKSsrw7x58/D555+jvLwcgwcPxtKlSxEVVZm4nTp1CtOnT8dvv/2GoKAgTJo0Cc899xwUCpdPr9FLjg7Gmn/qW1QWAoS3BfJOSHW37QZ4L0AiIiIiD3K65vavv/6qcyFZeXk5vvzyS5eefNOmTZgxYwa2b9+O9evXw2g0YtCgQSguLraNeeCBB/DDDz9g9erV2LRpE7KysjB69Gjb7WazGcOHD4fBYMDWrVvx0UcfYcWKFXjqqadciqWpSNY60TEBqCxNYN0tERERNSFOJ7dpaWm4cOGC7bpGo8GJEyds1/Pz8zF+/HiXnnzt2rWYPHkyOnbsiK5du2LFihU4deoUdu3aBQAoKCjABx98gFdeeQXXX389unfvjuXLl2Pr1q3Yvn07AGDdunU4ePAgVq5cidTUVAwdOhSLFy/GW2+9BYPB4FI8TYG11+3xc0UwmCy1D7QuKmPdLRERETUhTr9vX721VE2tpupsP+WEgoICAEB4uLS71q5du2A0GjFgQOXb5snJyYiLi8O2bdvQs2dPbNu2DZ07d7YrUxg8eDCmT5+OAwcOoFu3bg7PU15ejvLyctt1vV4PQOrjazQaL+scnGF9Dk88V0SAHMFqBQrLTEjPzrfN5FYnRHaCAoCYtRcmL5wz4Nnzbuia87kTEVHT44u/a84+l1uLUgVBuOT7WiwWzJkzB71790anTp0AADqdDn5+fggNDbUbGxUVBZ1OZxtTNbG13m69rSbPPfccFi5c6HB83bp1CAgIuORzcNX69es98rgtlXIUlgn48pfNuCqi5n84FKZiDAcgFJzC+jVfwKioOQn2BE+dd2PQnM+diIiaHm/+XSspKXFqXINZcTVjxgzs378fmzdv9vhzPfbYY5g7d67tul6vR2xsLAYNGgSNRuPx5zcajVi/fj0GDhwIpVLp9sffYT6IjL/OwD86EcMGXVHrOPHMixAuZmBQpyiIbfu7PY7qPH3eDVlzPnciImp6fPF3zfpOe31cSm4PHjxomw0VRRGHDx9GUVERAOD8+fMuhlhp5syZ+PHHH/HHH3+gdevWtuNarRYGgwH5+fl2s7c5OTnQarW2MX/99Zfd4+Xk5Nhuq4lKpYJKpXI4rlQqvZp4eOr5OsSEAjiDo7nFdT9+TCpwMQOK3H1A0kC3x1Ebb3+dG5LmfO5ERNT0ePPvmrPP41Jye8MNN9jV1d54440ApHIEURRdLksQRRGzZs3Ct99+i99//x1t2rSxu7179+5QKpXYuHEjxowZAwBIT0/HqVOnkJaWBkBa6PbMM88gNzcXkZGRAKQpco1Gg5SUFJfiaSpc6phw4Fsge6/HYyIiIiLyBqeT24yMDLc/+YwZM7Bq1Sp8//33CA4Ots0Kh4SEwN/fHyEhIZg6dSrmzp2L8PBwaDQazJo1C2lpaejZsycAYNCgQUhJScEdd9yBF198ETqdDk888QRmzJhR4+xsc3BFlJTcZhWUoaDEiJCAWv7T4Ta8RERE1MQ4ndzGx8e7/cmXLVsGAOjfv7/d8eXLl2Py5MkAgFdffRUymQxjxoyx28TBSi6X48cff8T06dORlpaGwMBATJo0CYsWLXJ7vI1FiL8SMSFqZBWUIT2nENe0Ca95YHRX6XN+JlCSBwTUMo6IiIiokfDpgjJnWoep1Wq89dZbeOutt2odEx8fj59++smdoTV6ydEaKbnV6WtPbv3DgLAE4OJJqd9t4nXeDJGIiIjI7ZzexIEal6SKutvDzu5UxrpbIiIiagKY3DZRTi8qY90tERERNSFMbpuopCrJbZ3lH9a6W87cEhERURPA5LaJatsyCAqZgMJyE87ml9Y+0FqWcPEkUHrRG6EREREReYxTC8q6devmdA/b3bt3X1ZA5B5+ChnaRQbhsK4Q6bpCtA6rZVvhgHAgNA7IPyUtKvPCTmVEREREnuLUzO2oUaNw00034aabbsLgwYNx/PhxqFQq9O/fH/3794darcbx48cxePBgT8dLLnB9Udk/ng2IiIiIyMOcmrmdP3++7fJdd92F2bNnY/HixQ5jTp8+7d7o6LI4ndzGpAKH1nBRGRERETV6Ltfcrl69GhMnTnQ4PmHCBHz99dduCYrco7Jjgr7ugWwHRkRERE2Ey8mtv78/tmzZ4nB8y5YtUKvVbgmK3CNZqwEAnDhXDIPJUvvAmG7S57wTQFmBFyIjIiIi8gyXdyibM2cOpk+fjt27d+Oaa64BAOzYsQMffvghnnzySbcHSJcuOkSNYLUChWUmHD9XhA7RmpoHBoQDIXFAQcWisjb9vBsoERERkZu4nNw++uijaNu2Lf773/9i5cqVAIAOHTpg+fLlGDt2rNsDpEsnCAKStcHYefIi0nWFtSe3ABDTVUpus/YyuSUiIqJGy+XkFgDGjh3LRLaRSKpIbg/p9BiFVrUPjE4FDv3AulsiIiJq1C5pE4f8/Hy8//77ePzxx5GXlwdA6m979uxZtwZHly+pou6W2/ASERFRc+DyzO2///6LAQMGICQkBCdPnsRdd92F8PBwfPPNNzh16hQ+/vhjT8RJl6hDlW146xRtXVR2XFpUpg7xcGRERERE7ufyzO3cuXMxefJkHD161K47wrBhw/DHH3+4NTi6fFdUJLfZBWUoKDHWPjCwBRASK13O/tcLkRERERG5n8vJ7c6dO3HPPfc4HG/VqhV0Op1bgiL30aiVaBXqDwBIz6lv9rar9Jl1t0RERNRIuZzcqlQq6PWOmwIcOXIEERERbgmK3KtypzInN3Ng3S0RERE1Ui4ntyNHjsSiRYtgNEpvcQuCgFOnTuGRRx7BmDFj3B4gXT6XtuEFOHNLREREjZbLye3LL7+MoqIiREZGorS0FNdeey3atWuH4OBgPPPMM56IkS5TstOLylKlzxeOAWX1zPISERERNUAud0sICQnB+vXrsWXLFvzzzz8oKirClVdeiQEDBngiPnID6za8R3SFEEURgiDUPDAoAtC0AvRnAd2/QEIfL0ZJREREdPlcSm6NRiP8/f2xd+9e9O7dG7179/ZUXORGbSMCoZQLKCw34Wx+KVqHBdQ+ODpVSm6z/2FyS0RERI2OS2UJSqUScXFxMJvNnoqHPEAplyExIggAcDibmzkQERFR0+Vyze1//vMfu53JqHGwLiqrvx1YqvSZi8qIiIioEXK55vbNN9/EsWPHEBMTg/j4eAQGBtrdvnv3brcFR+6TrNXge2Q53zHh/FGgvBBQBXs8NiIiIiJ3cTm5HTVqlAfCIE+r7JhQTxeEoEggOAYozAJ0+4D4Xl6IjoiIiMg9XE5u58+f74k4yMOsZQknzhWj3GSGSiGvfXBMKpCeJdXdMrklIiKiRsTlmltqnKJD1AhWK2CyiDieW1zP4FTpM+tuiYiIqJFxObk1m81YsmQJrrnmGmi1WoSHh9t9UMMkCEJlaUJOPaUJ7JhAREREtbGYIWRuRqu8bRAyNwOWhtVFy+XkduHChXjllVfwf//3fygoKMDcuXMxevRoyGQyLFiwwAMhkrtYN3Ood1GZdeb2/BGgvMizQREREVHjcXAN8FonKFaOwlWZy6BYOQp4rZN0vIFwObn99NNP8d5772HevHlQKBQYP3483n//fTz11FPYvn27J2IkN0lydhve4CggOBqAKC0qIyIiIjq4BvhyIqDPsj+uz5aON5AE1+XkVqfToXPnzgCAoKAgFBQUAABuvPFG/O9//3NvdORWyc4mtwAQ3VX6zLpbIiIispiBtY8AEGu4seLY2kcbRImCy8lt69atkZ2dDQBITEzEunXrAAA7d+6ESqVyb3TkVldUJLfZBWUoKDHWPdhamsC6WyIiIsrc6jhja0cE9GelcT7mcnJ78803Y+PGjQCAWbNm4cknn0T79u0xceJE3HnnnW4PkNxHo1aiVag/AOBwff1urYvKOHNLRETUfBXlAge+Bf582cnxOZ6Nxwku97l9/vnnbZf/7//+D3Fxcdi2bRvat2+PESNGuDU4cr9kbTDO5pciPacQPdq2qH1g1UVlhmLAL7D2sURERNQ0FOqAk5uBzC3S5/NHXLt/UJRn4nKBy8ltdWlpaUhLS3NHLOQFSdpgbDycW3/HBE209AItygF0+4G4Ht4JkIiIiLyn4GxFIvsncHILkHfccUxUJyAuDdj/NVB6ETXX3QqAJqZBbP7kcnL78ccf13n7xIkTLzkY8jynOyYA0uzt0V+k0gQmt0RERI1f/ikpiT25GcjcDFw8WW2AAGg7Awl9pI+4NCCgYh+DNv2krggQYJ/gCtKnIc8Dsjp2QPUSl5Pb+++/3+660WhESUkJ/Pz8EBAQwOS2gbP2uk3XFUIURQiCUPvgmFQpueWiMiIiosZHFKXk1VpicHILUHDKfowgkzokxfcGEvoCcT0B/9CaHy9lJDD2Y6lrQtXFZZoYKbFNGempM3GJy8ntxYsXHY4dPXoU06dPx0MPPeSWoMhz2kYEQikXUFRuwpmLpYgND6h9MLfhJSIiajxEEcg7UZHIVtTN6s/ajxHkQEw3IKEimY3tAag1zj9HykggeThMJ/7A3j9/QWrfwVC07dcgZmytLrvmFgDat2+P559/HhMmTMDhw4fd8ZDkIUq5DIkRQTisK0S6rrDu5NbaMeHcYcBQAvjVMZaIiIi8SxSB80el8gLrzGyRzn6MTAm0urJiZraPlMyqgi7veWVyiPF9cPaAHl3j+zSoxBZwU3ILAAqFAllZdfU/o4YiWRssJbc5hRiQUseqxuBoIDASKM4FcvYDsdd4L0giIiKyJ4rShJNtZnar9De6Krkf0OqqiprZ3kDra5rd5JTLye2aNfZbq4miiOzsbLz55pvo3bu32wIjz0nSagBk1d8xQRAq6m7XSXW3TG6JiIi8x2IBcg9WLv7K3AqUXLAfo1ADra+Wktn43kDrqwClv2/ibSBcTm5HjRpld10QBEREROD666/Hyy872eCXfMq6De/h7Ho2cgAqOiasY90tERGRp1nM0jul1hKDU1srWm9VofCXJpsS+kozs626AwruEFuVy8mtxWLxRBzkRdZ2YCfOF6PcZIZKUUetjLXulh0TiIiI3MtsAnT/Vi7+ytwGlBfYj1EGSu04E/oA8X2kxWAKP9/E20i4reaWGo/oEDU0agX0ZSYczy1GSkwdqyStHRPOHQaMpc3+rQ4iIqJLZjYC2f9UbphwajtgqFYi6BcMxKdVLgCL7grIlb6Jt5FyObmdO3eu02NfeeUVVx+evEAQBCRrNfjrZB7Sc/R1J7eaGCCgJVByXtqpLPZq7wVKRETUmJkMQNbuypnZUzsAY7H9GFWIlMxaa2a1XQA55x4vh8tfvT179mDPnj0wGo1ISkoCABw5cgRyuRxXXnmlbVydmwOQzyVpg/HXyTwczi4EutUx0Lqo7NgGqe6WyS0REVHNTOXAmb8rN004/RdgKrUfow6tTGQTektb2zawVlqNncvJ7YgRIxAcHIyPPvoIYWFhAKSNHaZMmYK+ffti3rx5bg+S3M9ad1tvxwRAKk04toF1t0RERFUZS4EzO6USg8wt0mVTmf2YgBaVJQbxvYHIFEAm8028zYTLye3LL7+MdevW2RJbAAgLC8PTTz+NQYMGMbltJKwdE9KdSW6ti8rYMYGIiJozQ7E0G5u5RUpoz/4NmA32YwIjqszM9gEikqV3QclrXE5u9Xo9zp0753D83LlzKCx0IlGiBuGKiuRWpy9DQYkRIQF1FKtbF5XlHuKiMiIiaj7Ki4DT2ytnZs/uAiwm+zHB0ZUlBvF9gJbtmcz6mMvJ7c0334wpU6bg5ZdfxjXXSE39d+zYgYceegijR492e4DkGRq1Eq1C/XE2vxSHdXr0aNui9sEhraW3VUouADkHgdbdvRcoERGRt5TppQ4GmRV9ZrP2AKLZfoymlf3MbHhbJrMNjMvJ7dtvv40HH3wQt912G4xGo/QgCgWmTp2Kl156ye0Bkucka4MrktvCupNbQZBmb49vBLL3MLklIqKmoTQfOLWtsptB9j+AWK2ff2icNCOb0FtKaMMSmMw2cC4ntwEBAVi6dCleeuklHD9+HACQmJiIwMBAtwdHnpWkDcbGw7nOLSqLSZWSWy4qIyKixqokT9rC1trNQLcPgGg/JqxNZYlBQm8puaVG5ZIbqQUGBqJLly7IzMxEZmYmkpOTIePqv0YlybaozMlteAEuKiMiosaj+Hzl4q+Tm4HcA45jWrSz72YQ0sr7cZJbOZ3cfvjhh8jPz7fbxGHatGn44IMPAABJSUn45ZdfEBsb6/4oySM6REubNxzJKYIoinX3JrZ2TMg9BBjLAKXa8wESERG5oii3ssTg5GZpd83qWiZVlhgk9AGCtd6PkzzK6eT23XffxT333GO7vnbtWixfvhwff/wxOnTogJkzZ2LhwoV4//33PRIouV+bloFQygUUlZtw5mIpYsMDah8cEgv4hwOledJ/vq1Yd0tERD6mz65MZE9uBi4cdRwTmVKlm0FvICjS+3GSVzmd3B49ehRXXXWV7fr333+Pm266CbfffjsA4Nlnn8WUKVPcHyF5jFIuQ2JEEA7rCnFYV1h3cmvdqez4r1LdLZNbIiLytoIzFW25KpLZvBPVBgjSjl/WRDa+NxBYx4JpapKcTm5LS0uh0Whs17du3YqpU6farrdt2xY6nc690ZHHJWuDcVhXiHSdHgNTouoeHJ0qJbesuyUiIm+4mGk/M5ufaX+7IAO0nSsXf8WlAQHhvomVGgynk9v4+Hjs2rUL8fHxOH/+PA4cOIDevXvbbtfpdAgJCfFIkOQ5SVoNgCznOyYA7JhARETuJ4rAxYzKDRNObgYKTtuPEeRAdFcpkU3oC8T1BNTMPcie08ntpEmTMGPGDBw4cAC//vorkpOT0b175VvTW7duRadOnTwSJHlOcrQL2/BGd5U+5x4CTOWAQuXByIiIqEkTReDC8coSg5NbgMIs+zEyBRDTrXLxV2wPQK2p+fGIKjid3D788MMoKSnBN998A61Wi9WrV9vdvmXLFowfP97tAZJnJVe0AztxvhjlJjNUCnntg0PjAXUoUJYP5BwAWl3plRiJiKgJEEXg/JHKEoPMLUBRjv0YmVJa02GtmY3tAaiCfBMvNVpOJ7cymQyLFi3CokWLary9erJLjYNWo4ZGrYC+zIRjuUXoGFPH2zvWRWUnfpfqbpncEhFRbSwWqRVX5hbg5J/S5gnF5+zHyP2A1ldXzsy2vhrwq2NxM5ETLnkTB2oaBEFAslaDv07mIV1XWHdyC0iLyk78zrpbIiKyZ7FIrSJtM7NbpfaRVSnUUgKb0Ef6aHUV+6aT2/l0S7E//vgDI0aMQExMDARBwHfffWd3++TJkyEIgt3HkCFD7Mbk5eXh9ttvh0ajQWhoKKZOnYqioiIvnkXjV7lTmQuLytgxgYioebOYpYmOrW8Cn40HXmwDvN0HWPsocPhHKbFVBgBt+wPXPQFMWQs8egqY/CPQ/1EpuWViSx7g05nb4uJidO3aFXfeeSdGjx5d45ghQ4Zg+fLltusqlf0ipttvvx3Z2dlYv349jEYjpkyZgmnTpmHVqlUejb0psS4qc6pjgnUb3pyDXFRGRNScmE2A7p/KxV+ntgPlBfZj/IKkOlnrzGx0KqDw80m41Hz5NLkdOnQohg4dWucYlUoFrbbmrfEOHTqEtWvXYufOnbYNJt544w0MGzYMS5YsQUxMjNtjboqSXZm5DUuoXFSWe6hyJpeIiJoWs1GamT35p1Q3e2oHYKj2d0KlkdpxJfSRes1GdwXkrHgk32rwr8Dff/8dkZGRCAsLw/XXX4+nn34aLVpIu41s27YNoaGhdjunDRgwADKZDDt27MDNN99c42OWl5ejvLzcdl2v1wMAjEYjjEajB88Gtuep+tnX2oT7AwB0+jKcKyhBaICyzvFybRfITv4B05ldECM6Ov08De28vak5nzsRNRJmA4SsPRAyt0A4tRXCmZ0QjMV2Q0R1CMTYnhDje8MS1wuI6gzIqnTZsYiAhb/nmgNf/F1z9rlcTm7NZjNWrFiBjRs3Ijc3FxaLxe72X3/91dWHrNWQIUMwevRotGnTBsePH8fjjz+OoUOHYtu2bZDL5dDpdIiMtN8jWqFQIDw8vM7d0p577jksXLjQ4fi6desQEOC9VZrr16/32nPVJ1wlR165gI+/X4929awpSykJRnsAp3f8gH+zW7r8XA3pvL2tOZ87ETUsMosBYcUn0KLoMFoWHUZY8TEoRIPdGIM8EBeCknG+4kPvHyvtCnYBwIUsAFk1PjY1H978u1ZSUuLUOJeT2/vvvx8rVqzA8OHD0alTJwiC4HJwzho3bpztcufOndGlSxckJibi999/xw033HDJj/vYY49h7ty5tut6vR6xsbEYNGiQ3RbDnmI0GrF+/XoMHDgQSmXds6Te8l3ebvyWfh5hbTphWM+4OscKBw3At/9DvN9FtB42zOnnaIjn7S3N+dyJqIEwlkI4uxNC5lZpZvbsLgjmcrshYkBLiHG9IMb1giW+F4SIZLQUZHB9GoOaOl/8XbO+014fl5Pbzz//HF9++SWGuZDUuEvbtm3RsmVLHDt2DDfccAO0Wi1yc3PtxphMJuTl5dVapwtIdbzVF6YBgFKp9Gri4e3nq0tKTAh+Sz+Po+dK6o8pVtqZTpZ7EDJBdHmxQEM6b29rzudORF5mKAZO76jczvbsLsBsPzOLwMiKxV+9gfg+ECKSbJNWdWzpQ2Tjzb9rzj6Py8mtn58f2rVr53JA7nDmzBlcuHAB0dHRAIC0tDTk5+dj165dtq2Af/31V1gsFvTo0cMnMTZWSVppxjpd58R/RWFtpL28ywqAc4cqt+UlIiLfKS+UFn1lVnQzyNoNWEz2Y4KjKxZ/VWya0KKdtEEPURPicnI7b948/Pe//8Wbb7552SUJRUVFOHbsmO16RkYG9u7di/DwcISHh2PhwoUYM2YMtFotjh8/jocffhjt2rXD4MGDAQAdOnTAkCFDcPfdd+Ptt9+G0WjEzJkzMW7cOHZKcFHVjgkWiwiZrI7vrSBICW3GH9JKWia3RETeV1YgteOybmWbtRcQzfZjNK2rzMz2BsLbMpmlJs/l5Hbz5s347bff8PPPP6Njx44OU8TffPON04/1999/47rrrrNdt9bBTpo0CcuWLcO///6Ljz76CPn5+YiJicGgQYOwePFiu5KCTz/9FDNnzsQNN9wAmUyGMWPG4PXXX3f1tJq9Ni0DoZQLKDaYcTa/FLHh9Sysi06VktvsvQAmeSFCIqJmrvQikLmtYjvbzYDuX0C0X9SN0DggoW/FzGxvIDSeySw1Oy4nt6GhobW22HJV//79IYpirbf/8ssv9T5GeHg4N2xwA6VchnaRwTiUrcdhXaETyW3FbC234SUi8oySvIpEdotUaqDbD6Da38ywNpUbJsT3BkJjfRIqUUPicnJbdbcwalqStVJym67TY2BKVN2DY7pJn3MOSI2+5VwkRUR0WYrOScmsNaHNPeA4pkV72+IvJPQGNCzBI6quwW/iQN6TpHVhG96wNtLONOV6aaey6C4ejo6IqIkpzKlc/JW5BTh32HFMRHJliUF8byC49k5ARCS5pOT2q6++wpdffolTp07BYLBvK7J79263BEbe51JyK5NJpQkn/5TqbpncEhHVTZ9VWWJwcjNw4ZjjmMiOlYlsfG8gKML7cRI1ci4nt6+//jr+85//YPLkyfj+++8xZcoUHD9+HDt37sSMGTM8ESN5ibVjQsb5YpSbzFAp6ulyaE1us/YCV070fIBERI1J/unKxV8nNwMXM6oNEABtp8oSg7heQGALn4RK1JS4nNwuXboU7777LsaPH48VK1bg4YcfRtu2bfHUU08hLy/PEzGSl2g1aoT4K1FQasSx3CJ0jKlnH15r3W32Xo/HRkTUoIkikJ9ZWWJw8k8g/5T9GEEGaLtULv6KTwP8w3wTL1ET5nJye+rUKfTq1QsA4O/vj8JC6S3sO+64Az179sSbb77p3gjJawRBQJI2GH9l5CFdV1h/chudKn3W7eeiMiJqXkQRyDtRufjr5GZAf8Z+jCAHYlIrN0yI6yltgENEHuVycqvVapGXl4f4+HjExcVh+/bt6Nq1KzIyMups60WNQ3JFcutU3W14W8AvGDAUAufSpbfXiIiaIlGUamStGyac3AwUZtuPkSmAmCsruxnE9QBUwb6Jl6gZczm5vf7667FmzRp069YNU6ZMwQMPPICvvvoKf//9N0aPHu2JGMmLLmlRWeZmqTSByS0RNRWiKP3Tbl38lbkVKMqxHyNTAq2vquxmENsD8Av0TbxEZONycvvuu+/CYpF2RJkxYwZatGiBrVu3YuTIkbjnnnvcHiB5V+U2vHrn7hCTKv3yz9oLdJvgsbiIiDzKYgHOHaooMfhTSmZLztuPkauA1ldXdjNofTXgV8+GN0TkdS4ntzKZDDKZzHZ93LhxGDdunFuDIt+5IkpKbnP05cgvMSA0wK/uO1jrbrmojIgaE4sFyNlfWWKQuRUorbYoWuEPxF5d0c2gD9CqO6BU+yZeInLaJfW5/fPPP/HOO+/g+PHj+Oqrr9CqVSt88sknaNOmDfr06ePuGMmLgtVKtA7zx5mLpTisK0TPtvW0pYlJlT7r9gNmEyDnviBE1ABZzIDu34q2XFuAU1uBsgL7McoAqbQgoTeQ0Feqn1XU8w8+ETU4LmciX3/9Ne644w7cfvvt2LNnD8rLywEABQUFePbZZ/HTTz+5PUjyrmRtsJTcZuvrT27DEysXlZ1PB6I6eidIIqK6mE1A9j8VJQZbgFPbpR0Vq/ILkjoYxFuT2VR2fSFqAlxObp9++mm8/fbbmDhxIj7//HPb8d69e+Ppp592a3DkG0naYGw4lIv0HGcXlXWR/nhk7WVyS0S+YTYCWXukZPbkFuD0DsBQZD9GpQHi0ipmZvsA2q58t4moCXL5pzo9PR39+vVzOB4SEoL8/Hx3xEQ+lqTVAHCyYwJQ0TFhi1R32+12zwVGRGRlKgfO7q6ol90MnP4LMJbYj1GHAvG9KvvMajsDsnp2XiSiRu+S+tweO3YMCQkJdsc3b96Mtm3buisu8qEOFR0TjugKYbGIkMmEuu9gXVSWtdejcRFRM2YsA87+XbmV7ZmdgKnMfox/uJTMJvSVZmcjO0rvLhFRs+Jycnv33Xfj/vvvx4cffghBEJCVlYVt27bhwQcfxJNPPumJGMnLEloGwk8uQ7HBjLP5pYgNr6fVjW1R2T4uKiMi9zCUAGf+qtzO9szfgLncfkxAy8rFX/G9gYhkJrNE5Hpy++ijj8JiseCGG25ASUkJ+vXrB5VKhQcffBCzZs3yRIzkZUq5DImRQTiUrcehbH39yW2LdoAyEDAWA+ePAFEp3gmUiJqO8iKpTta6ne3ZXYDFaD8mKKqyxCChD9DyCkCo550lImp2XE5uBUHAf/7zHzz00EM4duwYioqKkJKSgqCgIE/ERz6SrA3GoWw90nWFGNRRW/dgmVxaVHZqm1R3y+SWiOpTppeSWet2tll7AIvJfkxwTOXir/g+QItEJrNEVK9Lfv/Yz88PKSlMYpoq2za8znRMAKS621PbpLrb1Ns8FhcRNVKl+VI7rsyKPrPZewHRYj8mJLYika3YzjasDZNZInKZ08ntnXfe6dS4Dz/88JKDoYajchteJ5Nba90tdyojIgAoyZP+4T25RUpodfsck9nQ+MoSg/jeQFi8b2IloibF6eR2xYoViI+PR7du3SCKoidjogYguaIdWMb5YpQZzVAr62mfY+2YoNsn7QTEdjtEzUvxBam8wFozm7MfQLW/FeFtK0sMEnoDIa19EioRNW1OJ7fTp0/HZ599hoyMDEyZMgUTJkxAeHi4J2MjH4rSqBDir0RBqRHHcovQqVVI3Xdo2b7KorKjQGSydwIlIt8oOldZYpC5Bcg96DimRXv7mVlNtPfjJKJmx+nk9q233sIrr7yCb775Bh9++CEee+wxDB8+HFOnTsWgQYMgsC6qSREEAUnaYPyVkYd0XWH9ya1MLjVIP71dKk1gckvUtBTqKhd/ndwibbddXURyZSIb3xsIjvJ+nETU7Lm0oEylUmH8+PEYP348MjMzsWLFCtx3330wmUw4cOAAOyY0McnW5NbZRWUxqVJym7UX6DrOk6ERkacVnK1IZCsS2gvHHMdEdapc/BXfGwhs6f04iYiqueRuCTKZDIIgQBRFmM1md8ZEDUSyy9vwpkqfuaiMqPHJP1W5+OvkZuDiyWoDBOndGdvMbC8ggKVpRNTwuJTclpeX28oSNm/ejBtvvBFvvvkmhgwZAhl3hWlykmwdE/TO3cHWMeFfLiojashEUUperSUGJzcDBafsxwgyILpr5aYJcT0B/zCfhEtE5Aqnk9v77rsPn3/+OWJjY3HnnXfis88+Q8uWfAuqKbMmtzn6clwsNiAs0K/uO7S8AlD4S4vKLhwDIpK8ECUR1UsUgbwTVWpmNwP6s/ZjBDkQ062ixKAPENcDUNdTa09E1AA5ndy+/fbbiIuLQ9u2bbFp0yZs2rSpxnHffPON24Ij3wpSKdA6zB9nLpbisK4QaYkt6r6DdVHZmb+kulsmt0S+IYpS1xJrN4OTm4Einf0YmQJo1b2yZja2B6AK9k28RERu5HRyO3HiRHZEaIaStcE4c7EU6Tp9/cktIJUmnPlLqrvt+n+eDo+IACmZPXdYSmJPbgYytwLFufZj5H5Aq6sqF3/FXgP4BfomXiIiD3JpEwdqfpK1Gmw4lOt8xwTrorKsvZ4KiYgsFqmvbOYW4OSfUjJbcsF+jFwlJbDWmdnWVwNKf9/ES0TkRZfcLYGaB2vdrdMdE6yLynT/Sn+AudCQ6PJZzNKOX9YSg1NbgdKL9mMU/lIya+1m0Ko7oFT7Jl4iIh9ickt1SrZ1TCiExSJCJqunNKVlkvRH1lBUsajsCi9ESdTEmE3SP4i2PrPbgPIC+zHKQGnRl7WbQcyVgKKeRZ9ERM0Ak1uqU0LLQPjJZSgxmHHmYiniWgTUfQe5AtB2As7slOpumdwS1c9sBLL/qayZPbUdMFR7t8QvWGrHldAbSOgrtemSK30TLxFRA8bkluqklMuQGBmEQ9l6HNbp609uAanu9sxOqe62y1hPh0jU+JgMQNaeyg0TTu2QWuhVpQoB4tMqa2a1XaV/HomIqE78TUn16qANxqFsPdJ1hRjUUVv/HWybOfzj0biIGg1TOXB2V+XM7Om/AFOp/Rh1qP1WttrO3AiFiOgSMLmletkWlbnaMSH7Hy4qo+bJWAqc+bty04QzOwFTmf2YgBbSFrbxfaSa2cgU/qwQEbkBk1uqly25zXZyG96IZEChlmoG804ALdt5MDqiBsBQApzeUbmd7dm/AbPBfkxgROXir4Q+0uJLJrNERG7H5JbqlazVAABOXihBmdEMtbKet0rlCiCqk/QHPnsvk1tqesqLgNPbpUQ2cwtwdjdgMdqPCdJWlhgk9AVatge4EQ4RkccxuaV6RWlUCPFXoqDUiGO5RejUyon95mNSpeQ2aw/Q+RaPx0jkUWV6qYOBdTvbrD2AaLYfo2llPzMb3pbJLBGRDzC5pXoJgoBkbTB2ZOQhXVfoXHJbte6WqLEpzQdObausmc3+BxAt9mNC4iraclVsmhCWwGSWiKgBYHJLTrElt84uKqvaMYGLyqihK8mTtrC1bpqg2wdAtB8TllC5+CuhNxAa54tIiYioHkxuySlJFXW3h1xZVCZXAeV64GIG0CLRg9ERuaj4fOXir8wtQM4BOCSz4YmVGybE9wZCWvkkVCIicg2TW3JKUpVteJ0iVwJRHYGs3VJ9IpNb8qWi3MoSg5NbgHOHHMe0vKKyxCC+N6CJ9n6cRER02ZjcklOsyW1uYTkuFhsQFujEHvYxqVJym72Xi8rIu/TZlSUGmVuA80ccx0R0qCwxiO8NBEV6P04iInI7JrfklCCVArHh/jidV4rDukKkJbao/07WRWVZez0ZGhFQcKaixKCim0HecccxUZ2qzMz2AgJbej9OIiLyOCa35LSkKE1Fcqt3Lrm1LSr7FxDFOocSueRiZpWa2c3AxZPVBgjS9rUJfaWZ2bg0ICDcF5ESEZGXMbklpyVrg7HhUI7zdbcRHQC5H1BeIO1UpuHqcroEoigtSrQu/jq5BSg4ZT9GkEnvFCT0ljoaxPUE/EN9ES0REfkYk1tymm0bXmeTW4VfxaKyPVLdLZNbcoYoAheOV5YYnNwMFGbZjxHkQEy3yg0TYnsAao1v4iUiogaFyS05LbkiuT2SUwiLRYRM5kTD+uhUKbnN2gskjfRofNRIiaK04KtqN4Minf0YmRJo1b1y8VdsD0AV5Jt4iYioQWNyS05r0zIQfnIZSgxmnLlYirgWAfXfKSYV2AXuVEaVLBbg3GH7bgbF5+zHyP2A1ldXbGfbG2h9DeDnxOuNiIiaPSa35DSFXIZ2kUE4mK3HIZ3eueS26ja8XFTWPFksQO4B+24GpXn2YxRqKZm1djNofRWg9PdNvERE1KgxuSWXJGuDcTBbj3RdIQZ31NZ/h8gUaRauLB/Iz/R4fNQAWMzS9rW2mdmt0ve/KmUAEHtNxXa2vaWSA4XKJ+ESEVHTwuSWXOLyTmUKPynBzd4LQfcPAKXngiPfMJsA3T+Vi79ObZc6ZFSlDJQ6GFi7GcR0k14bREREbsbkllxS2TFB7/ydYlKl5Db7HwBXeSQu8iKzUVogmLm5IpndARiq/bPjFwzEp1XUzPYBortKWzITERF5GJNbckmHaKndUsb5YpQZzVAr5fXfqaLuVtD9A4QyuW10TAZpG+WTFcns6b8AY7H9GHUIENerspuBtgsg568XIiLyPv71IZdEBqsQGqBEfokRx3KL0KlVSP13iu4KANLMbQgXlTV4xjLg7K6KetnNwOmdgKnUfox/WMU2thXdDKI6ATIn/tEhIiLyMCa35BJBEJAUFYwdGXk4rCt0LrmN6gjIlBDK8hFgOO/5IMk1xlLgzM6Kmdkt0mVzuf2YgBaVJQbxvaU6apnMN/ESERHVgcktuSxZKyW36c7W3SpUQGQHQPcvQkoyPBsc1c9QLJUWWHvMnt0FmA32YwIjK0sMEvoCEUmA4MSmHURERD7G5JZclqSV6m6d3oYXkBaV6f5FaOlJj8REdSgvlBZ9WXvMZu0GLCb7McHRlSUGCX2BFu2YzBIRUaPE5JZclhztYjswQFpgBCCqYC+EzM1A236s0fSUsgKpHZd1ZjZrLyCa7cdoWleZme0DhLdlMktERE0Ck1ty2RVRUnKbW1iOvGIDwgPr6Vd6cA2w6QUAQEjZGWDlKEATAwx5AUgZ6eFom4HSfODUtspuBrp/AdFiPyY0rmLDhIpNE0LjmcwSEVGTxOSWXBakUiA23B+n80pxWKdHr8SWtQ8+uAb4ciKAal0S9NnS8bEfM8F1VUlexe5fFdvZ6vbD4esb1qZyw4SE3lJyS0RE1Az4dLnzH3/8gREjRiAmJgaCIOC7776zu10URTz11FOIjo6Gv78/BgwYgKNHj9qNycvLw+233w6NRoPQ0FBMnToVRUVFXjyL5ikpSqq7rbM0wWIG1j4Ch8QLqDgmAj8+IC1uunAcKL4g7XZF9orOAQe+A356CFjaC3ixDfDFBGDHMmmbW4hSjeyVk4DR7wEPHATu3wvc9BaQOp6JLRERNSs+nbktLi5G165dceedd2L06NEOt7/44ot4/fXX8dFHH6FNmzZ48sknMXjwYBw8eBBqtRoAcPvttyM7Oxvr16+H0WjElClTMG3aNKxatcrbp9OsdIgOxoZDOXUnt5lbAX1W3Q9Uch74YKD9Mb8gQB0qbQzgX/HZ7nodtykDGt7b7RYzhMzNaJW3DUKmpv5648KcysVfmVuAc4cdx7RMqlj8VdGaK1jrufiJiIgaEZ8mt0OHDsXQoUNrvE0URbz22mt44okncNNNNwEAPv74Y0RFReG7777DuHHjcOjQIaxduxY7d+7EVVdJO1+98cYbGDZsGJYsWYKYmBivnUtzU7kNbx3JbVGOcw/mHy61ojJUzLgbiqQP/RnXA5MpKxLe2hLjWq77hwEqjft31Tq4Blj7CBT6LGnj4cxljvXG+qzKEoOTW4ALRx0fJzLFvs9sUIR74yQiImoiGmzNbUZGBnQ6HQYMGGA7FhISgh49emDbtm0YN24ctm3bhtDQUFtiCwADBgyATCbDjh07cPPNN9f42OXl5Sgvr2xSr9dL/VqNRiOMRqOHzqiS9Tm88VyektjCHwBwJKcQ5eUGyGSOs6WCfwunXmCmMR9CjO8jtacqKwDKCiCU5QNleqAsv+J6AVBeAJTmQyiXxthdLiuAYDEBFqM0G1xyaZtFiH5BtoRXVGtsibCoDgFUUkIsqkJsCbRoTZTVIQ6zxsLhHyH/egoAEVW/OqI+G/jyDojxfSHoz0C4aN/7V4QARHaEJb4XxLjeEON6SpsoVNWIXztERNT4+SKXcfa5Gmxyq9PpAABRUVF2x6Oiomy36XQ6REZG2t2uUCgQHh5uG1OT5557DgsXLnQ4vm7dOgQEBFxu6E5bv369157L3cwioBDkKDGYsfK7n9FSXcMg0YJBynCojXmoqVBABFCqDMf6/fnAgZ9qeSY/ABEVHxVUFR9VN0cTRcgt5VCaS6A0F0NpLoGfuRhKU+V1h8+mijHmEigsZQAAwTZrfLbGmOtiEeQwygOkD1kANGVnUD2xBQChogZZyPyz4usgoMA/HueDknEhOBkXApNgVAQCJgAnAJzY4WIkRERE3uHNXKakpMSpcQ02ufWkxx57DHPnzrVd1+v1iI2NxaBBg6DRaDz+/EajEevXr8fAgQOhVCo9/nye8t7JbTikK0R08lUYmBJZ4xghEcDXUyCiMqkDKlM+v5GvYFjyjV6ItnYiAKPZCJRLM8VCWUEdM8j50rjqM8iiGTLRDJWpECqT8/1/zf2fgKX7nQhUaxAIIN4zp0hERORWvshlrO+016fBJrdarbRAJicnB9HR0bbjOTk5SE1NtY3Jzc21u5/JZEJeXp7t/jVRqVRQqVQOx5VKpVeTTW8/n7t1iNHgkK4Qx86XYFht59H5ZkAul7omVFlcJmhigCHPQ9FQ2oAplYA6AAi5hIVZoihtaVtWICXBpflA+k/Atjfrvau8RRvIg1vUO46IiKgh8mYu4+zz+LQVWF3atGkDrVaLjRs32o7p9Xrs2LEDaWlpAIC0tDTk5+dj165dtjG//vorLBYLevTo4fWYm5tkrZM7laWMBObsh2nCd/g7fjpME74D5uxrOv1tBQFQBQEhrYCojlIXgyuGOHffoKj6xxAREZHTfDpzW1RUhGPHjtmuZ2RkYO/evQgPD0dcXBzmzJmDp59+Gu3bt7e1AouJicGoUaMAAB06dMCQIUNw99134+2334bRaMTMmTMxbtw4dkrwgiStVMJxSOfE2wQyOcT4Pjh7QI+u8X2a/ta78b2krgj6bNTc51eQbo/v5e3IiIiImjSfJrd///03rrvuOtt1ax3spEmTsGLFCjz88MMoLi7GtGnTkJ+fjz59+mDt2rW2HrcA8Omnn2LmzJm44YYbIJPJMGbMGLz++uteP5fmyDpze/J8McqMZqiVTTxhdYVMLrX7+nIiAAH2CW7FErMhzzf9JJ+IiMjLfJrc9u/fH6JY06yWRBAELFq0CIsWLap1THh4ODds8JHIYBVCA5TILzHiWG4ROrUKqf9OzUnKSGl74Wr1xqioN24yZRlEREQNSINdUEYNnyAISNYGY/uJPBzWFTK5rUnKSCB5OEwn/sDeP39Bat/BUNS3QxkRERFdsga7oIwah+SKutt0Z+pumytrvXF4mrRZBRNbIiIij2FyS5fFqW14iYiIiLyEyS1dFia3RERE1JAwuaXLckWUlNyeKyxHXrHBx9EQERFRc8fkli5LkEqBuPAAAMBh1t0SERGRjzG5pctmK03IZmkCERER+RaTW7psTm/DS0RERORhTG7pstlmbnOY3BIREZFvMbmly2aduT2aUwiLpfYd54iIiIg8jcktXbaEFoHwU8hQYjDj9MUSX4dDREREzRiTW7psCrkM7SODAACHuKiMiIiIfIjJLblFEheVERERUQPA5JbcwtYxIYe9bomIiMh3mNySWyRpNQC4DS8RERH5FpNbcosOFTO3J88Xo8xo9nE0RERE1FwxuSW3iAhWISxACYsIHM0p8nU4RERE1EwxuSW3EAShcjMHHetuiYiIyDeY3JLbJFfU3bJjAhEREfkKk1tyG1s7MG7DS0RERD7C5JbcJtlWlsDkloiIiHyDyS25zRVRUnJ7rrAcF4rKfRwNERERNUdMbsltAlUKxIUHAGDdLREREfkGk1tyqySWJhAREZEPMbklt7Jtw8vkloiIiHyAyS25lbUd2GF2TCAiIiIfYHJLbmUtSziiK4TFIvo4GiIiImpumNySWyW0CICfQoZSoxmn8kp8HQ4RERE1M0xuya0UchnaRwYB4KIyIiIi8j4mt+R2SVxURkRERD7C5JbcrkPForL0HL2PIyEiIqLmhsktuZ2t1202Z26JiIjIu5jckttZe92evFCMMqPZx9EQERFRc8LkltwuIliFsAAlLCJwNKfI1+EQERFRM8LkltxOEIQq2/Cy7paIiIi8h8kteYR1pzJ2TCAiIiJvYnJLHpFsm7llcktERETew+SWPCKJyS0RERH5AJNb8ogroqTk9nxROS4Ulfs4GiIiImoumNySRwSqFIgLDwDAulsiIiLyHia35DGsuyUiIiJvY3JLHpPMdmBERETkZUxuyWOS2A6MiIiIvIzJLXmMtWPCkZwiWCyij6MhIiKi5oDJLXlMQosA+ClkKDWacSqvxNfhEBERUTPA5JY8RiGX4YqoIACsuyUiIiLvYHJLHpUUJdXdsmMCEREReQOTW/Ioa8cELiojIiIib2BySx6VxOSWiIiIvIjJLXmUdeb25IVilBrMPo6GiIiImjomt+RREcEqhAf6wSICx84V+TocIiIiauKY3JJHCYKApKiK0oQcJrdERETkWUxuyeOqbuZARERE5ElMbsnjbB0TcriojIiIiDyLyS15XHK01OuWM7dERETkaUxuyeOuiAqCIADniwwoNPo6GiIiImrKmNySxwX4KRAXHgAAyCoRfBwNERERNWVMbskrrB0Tskt8HAgRERE1aUxuySusi8qyijlzS0RERJ7D5Ja84oqKmdtjegE7MvJgtog+jsh7zBYROzLysOt88zt3IiIib1P4OgBq+tbuz8bCHw4AAC6UC5jw4d+IDlFj/ogUDOkU7ePoPEs694PILigDIMfHR5vPuRMREfkCZ27Jo9buz8b0lbtxrshgd1xXUIbpK3dj7f5sH0XmedZzlxLbSs3h3ImIiHyFM7fkMWaLiIU/HERNb8Jbjz3y9T7kFpZDLhMgQKrHFQTAWpkrXa48IEDa0rfysvQhXRdsl1HTuFoeH1XuV9/jV4/DIc6Ky6JFxOPf7q/13AUAC384iIEpWshlrEMmIiJylwad3C5YsAALFy60O5aUlITDhw8DAMrKyjBv3jx8/vnnKC8vx+DBg7F06VJERUX5Ilyq5q+MPIdZy+oKSo146vsDXoqo4RABZBeUodfzGxEd4o+wACVCA/wQGqBEWMXn0AA/6bi/9boSQSqFLfkmIiIiRw06uQWAjh07YsOGDbbrCkVlyA888AD+97//YfXq1QgJCcHMmTMxevRobNmyxRehUjW5hXUntlZdWocgOkQNUayc0RVFABArPkvHxYorYsXtlWMr50el41XuV3EdVe9je0zHxxftHscWiO05q96vptisdykoNUCnL6/33HP05chxYpyVUi4gxN+aBFckxP5KhAVWJMD+fjUmymql3OnnICIiaswafHKrUCig1WodjhcUFOCDDz7AqlWrcP311wMAli9fjg4dOmD79u3o2bNnrY9ZXl6O8vLKhEKv1wMAjEYjjEbPb6FlfQ5vPJcvtQhw7uX18KD26NEm3MPReNeOjDxM+PDvesc9OSwJMaH+uFhiREGpEfklRuSXGio+G+0+l5ssMJpFnC8qx/ki5xNiAFArZQj1V0ofFclviL81QVZKl/2VCAmQxoQFKKHxV0IpZ1k+ERE58kUu4+xzNfjk9ujRo4iJiYFarUZaWhqee+45xMXFYdeuXTAajRgwYIBtbHJyMuLi4rBt27Y6k9vnnnvOodwBANatW4eAgACPnEdN1q9f77Xn8gWLCIT6yZFvACqrXKsSEeoHnDu4HT8d8nJwHubsuYfnHYDhIhAI6SMGAJQAQio+qjCYgRITUGwCSkwCim2XgWKjUHnZJFSOMwIWCCgzWqAzljs1m1yVWi4iUAEEKIBAhVjxGQhQVruukMYFKgG1HGAZMRFR8+DNXKakxLmdoBp0ctujRw+sWLECSUlJyM7OxsKFC9G3b1/s378fOp0Ofn5+CA0NtbtPVFQUdDpdnY/72GOPYe7cubbrer0esbGxGDRoEDQajSdOxY7RaMT69esxcOBAKJVKjz+fLykTcjDr838AwG5xlXXJ1tOju2Jwx6ZZI90Qzl0URRSVmxxmgatfLig14mLFjHFBqREFpSYAQJlZQJkZuFBeGXl9ZAIQUjFLXHUmOMS/slzCNoNc5XOAn5z1xEREjYQvchnrO+31adDJ7dChQ22Xu3Tpgh49eiA+Ph5ffvkl/P39L/lxVSoVVCqVw3GlUunVZNPbz+cLN6a2hkIhr9LrVaJtBr1eG8q5h/v5ITzYtfuYLWJFmYShomTCgIvFRlwsMUiJsPV4iXRZSpINKDaYYRGBiyVGXCwxAhecf04/uQwh1lpi/1oW19VQT6xSsJ6YiMhXvJnLOPs8DTq5rS40NBRXXHEFjh07hoEDB8JgMCA/P99u9jYnJ6fGGl3ynSGdojEwRYttx3Kx7s8dGNS3B9LaRTaLFliN9dzlMgHhgX4ID/Rz6X7lJjMKKmaFLxYbKmaHpUTYmgBXJsOVibHBbIHBbMG5wnKcK3StdMJfKa+l24R0Waot9kNYoBIhFQvuQvyVULCemIioSWpUyW1RURGOHz+OO+64A927d4dSqcTGjRsxZswYAEB6ejpOnTqFtLQ0H0dK1cllAnq0CceFQyJ6tAlv8MmdOzWnc1cp5IjUyBGpUTt9H1EUUWo0VyTA1RNfQ8XlittK7WeKLSJQajSjtMCMrHrazlUXrFZISW+AEiEVn8PsFto5zh5r1GzFRkTU0DXo5PbBBx/EiBEjEB8fj6ysLMyfPx9yuRzjx49HSEgIpk6dirlz5yI8PBwajQazZs1CWlpanYvJiKhhEQQBAX4KBPgp0CrU+XIji0VEYbnJVhphK5koNti6T1SWTxgqSiUMKCyT6okLy0woLDPhVJ7zscplQkXtcEXS6193yYT1Nn8l64mJiLylQSe3Z86cwfjx43HhwgVERESgT58+2L59OyIiIgAAr776KmQyGcaMGWO3iQMRNX2yikQzxF+JuBbOdzkxmS0ViW9lLXFl+YRjyYS1rKLUaIbZIiKv2IC8YgOAYqef008hq1hYV61kouKzVCpRMXscWJk0+ylYOkFE5KoGndx+/vnndd6uVqvx1ltv4a233vJSRETU2CnkMrQIUqFFkOOi0rqUGc22XsQ1lkxUTYhLDbbjRrMIg8mC3MJy5LpYTxzoJ6/sMFHDrnWOC+6ksoqmXPpCRFSfBp3cEhE1FGqlHGqlHFEu1hOXGMyOM8KlRuRXlE9YN+24WGKwlVgUlBphEYFigxnFhlKczS91+jkFAdCoq5RJ1FFDHFZlBjmYWzsTURPB5JaIyEMEQUCgSoFAlQKtw5y/n8UiorDMZEuEnZkpzi82orDcVLH9s1RznHnBuYbnAKCQCZW71dUwI+xQZxwozSD7+7EVGxE1LExuiYgaGJlMQEiAtAmGK4wV9cRVE+GqM8K19SwuM1pgsog4X2TA+SLX6olVCpldLXGof0Xia5s1rrl0gvXEROQpTG6JiJoIpVyGlkEqtLyEeuKaFtHZSiZq6VlssogoN1mg05dBp3etFVuQSiHNEgdW60dcvTVblUV3wWrWExNR/ZjcEhE1c2qlHNoQObQhrtUTF5WbqmznbKi5ZKKkyvGKcglRBIrKTSgqN7lcT2zd2rnGkomaFt0F+iGQWzsTNStMbomIyGWCICBYLc2mxoY7fz+zRURhWS0lE1X6Edv6FBdLCXFRRT2xNZmGC/XESrmAEFuHiSolE4F+laUUNSTKaiXriYkaIya3RETkNXKZUJFE+qENAp2+n8FUWU/sMENsPV5s333iYokRBpMFRrOI80XlOF/kWis2tVJW6xbO1UsmQqvUEyu5tTORTzG5JSKiBs9PIUNEsAoRwa7VE5cazFLJRHHNWzjX3H3CCLNFRJnRguyCMmS7urWzSoHQwLr6EVsvVy66C1YrIGM9MZFbMLklIqImy99PDn8/f0SHOL+1syhW39q5jlriKt0pCkqNAIDCchMKy004DefriWUV9cRVZ4TtSiYCq3efkC4HsJ6YyAGTWyIioioEQYBGrYRGrURsuPNbO5stYu2lEzUsurPeVmIwwyKiot7Y6FKsfnJZRTJc/0xx1dtUCtYTU9PF5JaIiMgN5DIB4YF+CA/0c+l+5SYzCipmgS8WV+lHXOOiu8pk2WC2wGC24FxhOc65uLWzv1JeS7cJ62XrorvKOuMQfyUUrCemRoDJLRERkQ+pFHJEauSIdHFr51KjuZ72azXXGVtEoNRoRmmBGVmu1hOrFTX3I65jm2eNmls7k3cxuSUiImpkBEFAgJ8CAX4KtAp1vp7YYpHqievrR1w9aS4sMwEACstMKCwz4VSe87HKZYLUn7j6Fs61lExYb/NXsp6YLg2TWyIiomZCVpFohvgrEd/C+fuZKrZ2rm0L5+olE9ZkudRohtkiIq/YgLxi17Z29lPIalxEV5kMV2nNFliZNHNrZ2JyS0RERHVSyGVoEaRCi0vY2rmgxvZr1suVi+uqLrgzmkUYTBbkFpYj18V64kA/ud1scP0L7qSyCm7t3HQwuSUiIiKPUCvlUCvliHKxnrjEYLZLfKXL1jIJ+1pi64xxQakRFhEoNphRbCh1eWtnjVppn/T6114yYU2ag1WsJ26ImNwSERFRgyEIAgJVCgSqFGgd5vz9LBYRhWWmijKJ6jvXObZoyy81IL/YiMKKrZ0LSqVexZkubO2skAkIregkUdOMsEOdccXmHv5+bMXmSUxuiYiIqNGTyQSEBCgREqBEggtbOxvN1bd2rmWmuMS+zrjMaIHJIuJ8kQHni1yrJ1YpZHa1xKH+FYlvQPXNOuwT5YaytbPZImJHRh52nRfQIiMPae0iG1RZB5NbIiIiaraUchlaBqnQ8hLqia0Jb2V5RJUEuFrPYmudsckiotxkgU5fBp3etVZsQSqF3eI664yxQ2u2gMrjwWr31hOv3Z+NhT8crNiWWo6Pj/6N6BA15o9IwZBO0W57nsvB5JaIiIjIRWqlHNoQObQhrtUTF5Wb7GuJ7conam7NVlBqhCgCReUmFJWbcOaia/XEIf7Kai3YallcZ110F+iHwBq2dl67PxvTV+6GWO05dAVlmL5yN5ZNuLJBJLhMbomIiIi8QBAEBKul2dTYcOfvZ7aI0Jcaq2zIUXfJxMViKSEuqqgntibTcKGeWCkXEOJfte2aEluOXXBIbAFABCAAWPjDQQxM0fq8RIHJLREREVEDJpcJCAv0Q1igH9q4UE9sMFmQX1qtZKLqds6l9jPG1uMGkwVGs4jzReU4X+RcKzbx/9u786iozvsN4M8AAsM2yg4KQgQUqhIwatFIoxJRkaJGq4mJIIh70CbGNXFpNcalGG0tak8EsSIxKmo9qDFREDHiClpAWYREE1ATRRg2Ed7fH5T7cwQEIzBkfD7n5JzcZd73+947c3i88947AAoeVuB83n14dXuOhyi3AoZbIiIiIg2kq6MFS2N9WBo3f+oEAJSrPIqtNvAmZt3F3ou3m3zt3ZLnm0fcGhhuiYiIiEgi19WGXFcO2yd+2tnUULdZ4fZ5g3RraB/PlCAiIiKidqufoylsFPpobDatDICNQh/9HJ9jMnErYbglIiIiomfS1pJhub8bANQLuHXLy/3d1H4zGcBwS0RERETNMLynDSLe9az3+DNrhX67eQwYwDm3RERERNRMw3va4E03a3yXcxdfJ6Vg2KD+/IUyIiIiIvrt0taSob+jKX7JFOjvaNqugi3AaQlEREREpEEYbomIiIhIYzDcEhEREZHGYLglIiIiIo3BcEtEREREGoPhloiIiIg0BsMtEREREWkMhlsiIiIi0hgMt0RERESkMRhuiYiIiEhjMNwSERERkcZguCUiIiIijcFwS0REREQaQ0fdBbQHQggAQHFxcZv0V1VVhbKyMhQXF6NDhw5t0md78LKOG3i5x05ERJpHHX/X6nJaXW5rDMMtgJKSEgCAnZ2dmishIiIiomcpKSmBQqFodLtMNBV/XwI1NTX46aefYGxsDJlM1ur9FRcXw87ODrdu3YKJiUmr99devKzjBl7usRMRkeZRx981IQRKSkpga2sLLa3GZ9byyi0ALS0tdOnSpc37NTExeSmDzss6buDlHjsREWmetv679qwrtnV4QxkRERERaQyGWyIiIiLSGAy3aqCnp4fly5dDT09P3aW0qZd13MDLPXYiItI87fnvGm8oIyIiIiKNwSu3RERERKQxGG6JiIiISGMw3BIRERGRxmC4JSIiIiKNwXDbhk6fPg1/f3/Y2tpCJpPh4MGD6i6pTaxZswZ9+/aFsbExLC0tMXr0aNy4cUPdZbWJiIgI9O7dW3rItZeXF44eParusoiIiJqlqewihMCyZctgY2MDuVwOHx8fZGdnq6fY/2G4bUOlpaVwd3fHli1b1F1Km0pMTMTs2bNx7tw5nDhxAlVVVRg2bBhKS0vVXVqr69KlCz777DNcunQJFy9exJAhQxAQEID09HR1l0ZERNSkprLLunXrsHnzZmzduhUpKSkwNDSEr68vKioq2rjS/8dHgamJTCZDXFwcRo8ere5S2ty9e/dgaWmJxMREeHt7q7ucNmdqaor169cjJCRE3aUQERE129PZRQgBW1tbfPjhh5g/fz4A4OHDh7CyskJUVBQmTpyoljp55Zba3MOHDwHUhryXSXV1NWJjY1FaWgovLy91l0NERPRC8vLyUFhYCB8fH2mdQqFA//798d1336mtLh219UwvpZqaGsybNw8DBw5Ez5491V1Om7h27Rq8vLxQUVEBIyMjxMXFwc3NTd1lERERvZDCwkIAgJWVlcp6KysraZs6MNxSm5o9ezb++9//4syZM+oupc10794dqampePjwIfbt24fAwEAkJiYy4BIREbUCTkugNjNnzhwcOXIEp06dQpcuXdRdTpvR1dWFk5MT+vTpgzVr1sDd3R2bNm1Sd1lEREQvxNraGgBw584dlfV37tyRtqkDwy21OiEE5syZg7i4OJw8eRKOjo7qLkmtampqUFlZqe4yiIiIXoijoyOsra3x7bffSuuKi4uRkpKi1ntLOC2hDSmVSuTk5EjLeXl5SE1NhampKezt7dVYWeuaPXs2YmJicOjQIRgbG0vzcBQKBeRyuZqra12LFy/GiBEjYG9v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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to train and evaluate models, and demonstrate the bias-variance decomposition\n",
        "def train_model_decomposition(degree, X_train, y_train, X_test, y_test):\n",
        "    poly = PolynomialFeatures(degree)\n",
        "    X_train_poly = poly.fit_transform(X_train)\n",
        "    X_test_poly = poly.transform(X_test)\n",
        "    model = LinearRegression().fit(X_train_poly, y_train)\n",
        "\n",
        "    # Training and testing errors\n",
        "    y_train_pred = model.predict(X_train_poly)\n",
        "    train_error = np.mean((y_train_pred - np.mean(y_train))**2)\n",
        "    train_bias = (np.mean(y_train_pred) - np.mean(y_train))**2\n",
        "    train_variance = np.mean((y_train_pred - np.mean(y_train_pred))**2)\n",
        "    y_test_pred = model.predict(X_test_poly)\n",
        "    test_error = np.mean((y_test_pred - np.mean(y_test))**2)\n",
        "    test_bias = (np.mean(y_test_pred) - np.mean(y_test))**2\n",
        "    test_variance = np.mean((y_test_pred - np.mean(y_test_pred))**2)\n",
        "\n",
        "    # Predicting smooth curve for plotting\n",
        "    X_plot_poly = poly.transform(X_plot)\n",
        "    y_plot = model.predict(X_plot_poly)\n",
        "\n",
        "    return train_error, train_bias, train_variance, test_error, test_bias, test_variance, y_plot\n",
        "\n",
        "# Training models\n",
        "degrees_decomposition = [1, 2, 3, 10]\n",
        "results_decomposition = {}\n",
        "for degree in degrees_decomposition:\n",
        "    train_error, train_bias, train_variance, test_error, test_bias, test_variance, y_plot = train_model_decomposition(degree, X_train, y_train, X_test, y_test)\n",
        "    results_decomposition[degree] = (train_error, train_bias, train_variance, test_error, test_bias, test_variance, y_plot)"
      ],
      "metadata": {
        "id": "Pqv26_I30j-T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Creating a dataframe for the testing error decomposition\n",
        "df_test = pd.DataFrame({\n",
        "    \"Model_Order\": [1, 2, 3, 10],\n",
        "    \"Test Error\": [results_decomposition[1][3], results_decomposition[2][3], results_decomposition[3][3], results_decomposition[10][3]],\n",
        "    \"Test Bias\": [results_decomposition[1][4], results_decomposition[2][4], results_decomposition[3][4], results_decomposition[10][4]],\n",
        "    \"Test Variance\": [results_decomposition[1][5], results_decomposition[2][5], results_decomposition[3][5], results_decomposition[10][5]]\n",
        "})"
      ],
      "metadata": {
        "id": "HU1OuOyy0tje"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating the irreducible testing error\n",
        "df_test['Irreducible Error'] = df_test['Test Error'] - df_test['Test Bias'] - df_test['Test Variance']\n",
        "df_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "aA5S42A50vmI",
        "outputId": "5bc3e489-e177-47d7-991b-fa19c161a184"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Model_Order  Test Error   Test Bias  Test Variance  Irreducible Error\n",
              "0            1  208.011406  204.198291       3.813115       8.082424e-14\n",
              "1            2   86.682469    2.599904      84.082565       0.000000e+00\n",
              "2            3   87.226212    2.188081      85.038131      -1.421085e-14\n",
              "3           10  185.236581   25.772121     159.464460      -5.684342e-14"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98760f11-9d2e-4ae1-945e-36075bc06000\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model_Order</th>\n",
              "      <th>Test Error</th>\n",
              "      <th>Test Bias</th>\n",
              "      <th>Test Variance</th>\n",
              "      <th>Irreducible Error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>208.011406</td>\n",
              "      <td>204.198291</td>\n",
              "      <td>3.813115</td>\n",
              "      <td>8.082424e-14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>86.682469</td>\n",
              "      <td>2.599904</td>\n",
              "      <td>84.082565</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>87.226212</td>\n",
              "      <td>2.188081</td>\n",
              "      <td>85.038131</td>\n",
              "      <td>-1.421085e-14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10</td>\n",
              "      <td>185.236581</td>\n",
              "      <td>25.772121</td>\n",
              "      <td>159.464460</td>\n",
              "      <td>-5.684342e-14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98760f11-9d2e-4ae1-945e-36075bc06000')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-98760f11-9d2e-4ae1-945e-36075bc06000 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-98760f11-9d2e-4ae1-945e-36075bc06000');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-562b8773-dd83-4ddd-b351-e73191b16d47\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-562b8773-dd83-4ddd-b351-e73191b16d47')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-562b8773-dd83-4ddd-b351-e73191b16d47 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_6cd45217-f63d-4b79-9944-385d73b9289f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6cd45217-f63d-4b79-9944-385d73b9289f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_test",
              "summary": "{\n  \"name\": \"df_test\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model_Order\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Error\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.99720559130392,\n        \"min\": 86.6824687762401,\n        \"max\": 208.01140591860053,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          86.6824687762401,\n          185.23658088308113,\n          208.01140591860053\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Bias\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 97.62993957315592,\n        \"min\": 2.188080732644602,\n        \"max\": 204.19829120708079,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.5999041901915003,\n          25.772120892078263,\n          204.19829120708079\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Variance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.567975986062535,\n        \"min\": 3.813114711519664,\n        \"max\": 159.4644599910029,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          84.0825645860486,\n          159.4644599910029,\n          3.813114711519664\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Irreducible Error\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.756682138545347e-14,\n        \"min\": -5.684341886080802e-14,\n        \"max\": 8.08242361927114e-14,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0,\n          -5.684341886080802e-14,\n          8.08242361927114e-14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a dataframe for the training error decomposition\n",
        "df_train = pd.DataFrame({\n",
        "    \"Model_Order\": [1, 2, 3, 10],\n",
        "    \"Train Error\": [results_decomposition[1][0], results_decomposition[2][0], results_decomposition[3][0], results_decomposition[10][0]],\n",
        "    \"Train Bias\": [results_decomposition[1][1], results_decomposition[2][1], results_decomposition[3][1], results_decomposition[10][1]],\n",
        "    \"Train Variance\": [results_decomposition[1][2], results_decomposition[2][2], results_decomposition[3][2], results_decomposition[10][2]]\n",
        "})"
      ],
      "metadata": {
        "id": "kVw8Psii0xFx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating the irreducible training error\n",
        "df_train['Irreducible Error'] = df_train['Train Error'] - df_train['Train Bias'] - df_train['Train Variance']\n",
        "df_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "Krrb6iMy0zJB",
        "outputId": "a1c362e7-f8cb-4013-df95-cda0bde233ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Model_Order  Train Error    Train Bias  Train Variance  Irreducible Error\n",
              "0            1    11.917322  0.000000e+00       11.917322       0.000000e+00\n",
              "1            2   253.982056  5.048710e-29      253.982056       2.842171e-14\n",
              "2            3   254.102311  1.262177e-29      254.102311       0.000000e+00\n",
              "3           10   275.890468  1.022364e-27      275.890468       5.684342e-14"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5c0da986-06a0-4800-98e2-835b45bd1e99\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model_Order</th>\n",
              "      <th>Train Error</th>\n",
              "      <th>Train Bias</th>\n",
              "      <th>Train Variance</th>\n",
              "      <th>Irreducible Error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>11.917322</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>11.917322</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>253.982056</td>\n",
              "      <td>5.048710e-29</td>\n",
              "      <td>253.982056</td>\n",
              "      <td>2.842171e-14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>254.102311</td>\n",
              "      <td>1.262177e-29</td>\n",
              "      <td>254.102311</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10</td>\n",
              "      <td>275.890468</td>\n",
              "      <td>1.022364e-27</td>\n",
              "      <td>275.890468</td>\n",
              "      <td>5.684342e-14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c0da986-06a0-4800-98e2-835b45bd1e99')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5c0da986-06a0-4800-98e2-835b45bd1e99 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5c0da986-06a0-4800-98e2-835b45bd1e99');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9f36e048-8f03-4bdf-be92-f6b54b1c4c7f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f36e048-8f03-4bdf-be92-f6b54b1c4c7f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9f36e048-8f03-4bdf-be92-f6b54b1c4c7f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_636c76b3-5527-482e-bd1f-d9d09f313ea3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_636c76b3-5527-482e-bd1f-d9d09f313ea3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train",
              "summary": "{\n  \"name\": \"df_train\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model_Order\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Error\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.12841527638406,\n        \"min\": 11.917321608876746,\n        \"max\": 275.89046830933415,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          253.98205643190562,\n          275.89046830933415,\n          11.917321608876746\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Bias\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.011231268442706e-28,\n        \"min\": 0.0,\n        \"max\": 1.0223637331664313e-27,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5.048709793414476e-29,\n          1.0223637331664313e-27,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Variance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.12841527638403,\n        \"min\": 11.917321608876746,\n        \"max\": 275.8904683093341,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          253.9820564319056,\n          275.8904683093341,\n          11.917321608876746\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Irreducible Error\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.721171505744275e-14,\n        \"min\": 0.0,\n        \"max\": 5.684341886080802e-14,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          2.842170943040401e-14,\n          5.684341886080802e-14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Part 2**"
      ],
      "metadata": {
        "id": "CQGncgOR_5x8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "\n",
        "# Downloading daily data of the NIFTY-50 broad market index of India\n",
        "nft = yf.download(\"^NSEI\", start=\"2014-01-01\", end=\"2025-02-22\", multi_level_index = False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hGCYrjoL5uvD",
        "outputId": "4a5c9369-d9a1-443a-db7a-9a3a9f1f598c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nft.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KdlAfv_cHic0",
        "outputId": "10f2e4b3-2846-48d7-d9d8-9b795ecc5cb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 2737 entries, 2014-01-02 to 2025-02-21\n",
            "Data columns (total 5 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   Close   2737 non-null   float64\n",
            " 1   High    2737 non-null   float64\n",
            " 2   Low     2737 non-null   float64\n",
            " 3   Open    2737 non-null   float64\n",
            " 4   Volume  2737 non-null   int64  \n",
            "dtypes: float64(4), int64(1)\n",
            "memory usage: 128.3 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Defining a function for calculating some technical indicators, which would act as inputs to the ML training\n",
        "def calculate_technical_indicators(data, window):\n",
        "    \"\"\"\n",
        "    Calculates various technical indicators for a given stock data.\n",
        "\n",
        "    Args:\n",
        "        data (str): The dataframe.\n",
        "        window (int): The rolling window size for calculations.\n",
        "\n",
        "    Returns:\n",
        "        pandas.DataFrame: DataFrame with the original data and calculated indicators.\n",
        "    \"\"\"\n",
        "\n",
        "    try:\n",
        "\n",
        "        # Calculating typical price\n",
        "        data['Typical Price'] = (data['High'] + data['Low'] + data['Close']) / 3\n",
        "\n",
        "        # Calculating RSI (Relative Strength Index)\n",
        "        delta = data['Typical Price'].diff()\n",
        "        gain = delta.where(delta > 0, 0)\n",
        "        loss = -delta.where(delta < 0, 0)\n",
        "        avg_gain = gain.rolling(window=window).mean()\n",
        "        avg_loss = loss.rolling(window=window).mean()\n",
        "        rs = avg_gain / avg_loss\n",
        "        data['RSI'] = 100 - (100 / (1 + rs))\n",
        "\n",
        "        # Calculating ATR (Average True Range)\n",
        "        high_low = data['High'] - data['Low']\n",
        "        high_close = np.abs(data['High'] - data['Close'].shift())\n",
        "        low_close = np.abs(data['Low'] - data['Close'].shift())\n",
        "        ranges = pd.concat([high_low, high_close, low_close], axis=1)\n",
        "        data['TR'] = np.max(ranges, axis=1)\n",
        "        data['ATR'] = data['TR'].rolling(window=window).mean()\n",
        "\n",
        "        # Calculating VWAP (Volume Weighted Average Price)\n",
        "        data['VWAP'] = (data['Typical Price'] * data['Volume']).rolling(window=window).sum() / data['Volume'].rolling(window=window).sum()\n",
        "\n",
        "\n",
        "        # Calculating BB (Bollinger Bands)\n",
        "        data['SMA'] = data['Typical Price'].rolling(window=window).mean()\n",
        "        data['STD'] = data['Typical Price'].rolling(window=window).std()\n",
        "        data['Upper'] = data['SMA'] + (data['STD'] * 2)\n",
        "        data['Lower'] = data['SMA'] - (data['STD'] * 2)\n",
        "\n",
        "        # Calculating Simplified MACD (Moving Average Convergence Divergence)\n",
        "        data['EMA12'] = data['Typical Price'].ewm(span=12, adjust=False).mean()\n",
        "        data['EMA26'] = data['Typical Price'].ewm(span=26, adjust=False).mean()\n",
        "        data['MACD'] = data['EMA12'] - data['EMA26']\n",
        "\n",
        "        # Calculating OBV (On-Balance Volume)\n",
        "        data['OBV'] = (np.sign(data['Close'].diff()) * data['Volume']).cumsum()\n",
        "\n",
        "        # Calculating the Volatility\n",
        "        data['Volatility'] = data['Close'].rolling(window=window).std()\n",
        "\n",
        "        # Defining the output/target variable\n",
        "        data[\"Target\"] = data[\"Typical Price\"].shift(-14)\n",
        "\n",
        "        # Dropping unnecessary columns\n",
        "        data = data.drop(['Close', 'Open', 'High', 'Low', 'Volume'], axis=1)\n",
        "\n",
        "        # Removing null values\n",
        "        data = data.dropna()\n",
        "\n",
        "        return data\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred: {e}\")\n",
        "        return None"
      ],
      "metadata": {
        "id": "EleZmo-OBWMd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating technical indicators using the above function\n",
        "nft_processed = calculate_technical_indicators(nft.copy(), 14)\n",
        "\n",
        "if nft_processed is not None:\n",
        "    # Splitting the data chronologically since this is time series data\n",
        "    split_index = int(len(nft_processed) * 0.8)\n",
        "    train_data = nft_processed[:split_index]\n",
        "    test_data = nft_processed[split_index:]\n",
        "\n",
        "    # Separating features (X) and target (y)\n",
        "    X_train = train_data.drop(\"Target\", axis=1)\n",
        "    y_train = train_data[\"Target\"]\n",
        "    X_test = test_data.drop(\"Target\", axis=1)\n",
        "    y_test = test_data[\"Target\"]\n",
        "\n",
        "    print(\"Training data shape:\", X_train.shape, y_train.shape)\n",
        "    print(\"Testing data shape:\", X_test.shape, y_test.shape)\n",
        "else:\n",
        "    print(\"Data processing failed. Cannot split the data.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HgpMPiAJGiKG",
        "outputId": "fc0db12b-4f50-4d21-e13d-1d083749398b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training data shape: (2168, 14) (2168,)\n",
            "Testing data shape: (542, 14) (542,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = X_train.values\n",
        "y_train = y_train.values\n",
        "X_test = X_test.values\n",
        "y_test = y_test.values"
      ],
      "metadata": {
        "id": "7nuWEdrEI-Q0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from mlxtend.evaluate import bias_variance_decomp\n",
        "\n",
        "max_levels = list(range(1, 50))\n",
        "levels = []\n",
        "squared_bias_plus_variance = []\n",
        "for level in max_levels:\n",
        "    model = DecisionTreeRegressor(max_depth=level)\n",
        "    model.fit(X_train, y_train)\n",
        "    mse, bias, var = bias_variance_decomp(\n",
        "        model,\n",
        "        X_train,\n",
        "        y_train,\n",
        "        X_test,\n",
        "        y_test,\n",
        "        loss=\"mse\",\n",
        "        num_rounds=200,\n",
        "        random_seed=1,\n",
        "    )\n",
        "    score = model.score(X_test, y_test)\n",
        "    squared_bias_plus_variance.append(bias**2 + var)\n",
        "    levels.append(level)\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "scatter = go.Scatter(x=levels, y=squared_bias_plus_variance)\n",
        "layout = go.Layout(\n",
        "    title=\"Bias variance tradeoff\",\n",
        "    xaxis=dict(title=\"levels\"),\n",
        "    yaxis=dict(title=\"bias^2+variance\"),\n",
        ")\n",
        "go.Figure(data=[scatter], layout=layout)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "ludo5VzOHY3f",
        "outputId": "86069695-7f34-4428-cdf9-62569023e3a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"4144c9b2-df95-4702-bb59-11d03192dec6\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4144c9b2-df95-4702-bb59-11d03192dec6\")) {                    Plotly.newPlot(                        \"4144c9b2-df95-4702-bb59-11d03192dec6\",                        [{\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],\"y\":[892891548090780.9,522130409346175.3,445285550015310.1,442715213324936.94,445595087286824.2,435003524357863.9,416572964670332.1,399297343973120.94,393734252301208.8,389725238155133.06,386704992546410.9,388955369088928.3,388695257503250.2,392144909910249.1,386251149033870.4,387377997430443.7,389562253500933.9,390010911069567.1,387906036155815.9,387540463413897.06,388869982760719.2,389718737953155.25,389662209027770.7,388538616234996.8,389663476476185.3,389063486104422.0,389949911030159.0,389244923769080.44,388774138773097.75,388629760964654.75,390655458094907.5,388796636049476.4,390549871163973.75,389157607342298.5,386391044869847.75,388891757960848.9,389695693425188.1,389760194109884.8,387910103955967.06,388825898284783.44,386915663129743.8,387819621238188.6,389551073299405.25,389412176622720.0,386246835184735.25,389216830022087.56,389039959988795.75,386589676468459.4,387752448367768.2],\"type\":\"scatter\"}],                        {\"title\":{\"text\":\"Fig. 7. Bias variance tradeoff\"},\"xaxis\":{\"title\":{\"text\":\"levels\"}},\"yaxis\":{\"title\":{\"text\":\"bias^2+variance\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('4144c9b2-df95-4702-bb59-11d03192dec6');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "levels = []\n",
        "squared_bias_plus_variance = []\n",
        "\n",
        "for degree in range(1, 30): # Using polynomial degrees as complexity measure\n",
        "\n",
        "    poly = PolynomialFeatures(degree)\n",
        "    X_train_poly = poly.fit_transform(X_train)\n",
        "    X_test_poly = poly.transform(X_test)\n",
        "    model = LinearRegression()  # Use LinearRegression\n",
        "    model.fit(X_train_poly, y_train)\n",
        "\n",
        "    y_pred_train = model.predict(X_train_poly)\n",
        "    y_pred_test = model.predict(X_test_poly)\n",
        "\n",
        "\n",
        "    mse, bias, var = bias_variance_decomp(\n",
        "        model,\n",
        "        X_train_poly,\n",
        "        y_train,\n",
        "        X_test_poly,\n",
        "        y_test,\n",
        "        loss=\"mse\",\n",
        "        num_rounds=200,\n",
        "        random_seed=1,\n",
        "    )\n",
        "\n",
        "    squared_bias_plus_variance.append(bias**2 + var)\n",
        "    levels.append(degree)\n",
        "\n",
        "\n",
        "scatter = go.Scatter(x=levels, y=squared_bias_plus_variance)\n",
        "layout = go.Layout(\n",
        "    title=\"Bias variance tradeoff\",\n",
        "    xaxis=dict(title=\"Polynomial Degree\"), #Change this from levels to polynomial degree\n",
        "    yaxis=dict(title=\"bias^2+variance\"),\n",
        ")\n",
        "go.Figure(data=[scatter], layout=layout)"
      ],
      "metadata": {
        "id": "WYMEXy5rL9AD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#5:47 pm"
      ],
      "metadata": {
        "id": "HG2lGpEzMDhT"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}